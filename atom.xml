<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://iflytek-duan.github.io/</id>
    <title>紫豪的Blog</title>
    <updated>2019-12-20T02:41:46.263Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://iflytek-duan.github.io/"/>
    <link rel="self" href="https://iflytek-duan.github.io//atom.xml"/>
    <subtitle>You cannot improve your past, but you can improve your future. Once time is wasted, life is wasted.</subtitle>
    <logo>https://iflytek-duan.github.io//images/avatar.png</logo>
    <icon>https://iflytek-duan.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 紫豪的Blog</rights>
    <entry>
        <title type="html"><![CDATA[【JJQ】Android开发规范（注释、命名、打包）]]></title>
        <id>https://iflytek-duan.github.io//post/jjq-android-ming-ming-gui-fan</id>
        <link href="https://iflytek-duan.github.io//post/jjq-android-ming-ming-gui-fan">
        </link>
        <updated>2019-12-19T08:11:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p><strong>统一、规范的命名有助于提升项目协作效率，也让代码的可读性、可维护性变得更加友好。</strong><br>
这里根据<a href="http://www.360sdn.com/2013/android_0517/144.html?ckvcbc=yz6j13"><strong>Google Android编程规范</strong></a>来对公司客户端研发输出一份相对全面、清晰的Android代码命名规范，如有异议，欢迎批评指正。</p>
<hr>
<h1 id="关于注释">关于注释</h1>
<p>在开发过程中，类、生僻对象命名、方法原则上都要加上相关注释，说明含义、用途。</p>
<hr>
<h1 id="各对象暂定的命名规范">各对象暂定的命名规范</h1>
<ul>
<li>
<p>项目名称(Project name)</p>
<ul>
<li>命名规则：<code>大驼峰式</code>命名，单词间连续无间隔；</li>
<li>示例：如新建一个名为BaiYaoWanJia的项目。</li>
</ul>
</li>
<li>
<p>模块命名(Module-Library name)</p>
<ul>
<li>命名规则：Library name采用<code>大驼峰式</code>命名，单词间连续无间隔，Module name会自动生成，不需修改；</li>
<li>示例：<img src="https://iflytek-duan.github.io//post-images/1576744158007.png" alt="Module.png"></li>
</ul>
</li>
<li>
<p>包</p>
<ul>
<li>命名规则：小写、单词间连续无间隔，3级包名一般为<code>applicationId</code>或Module的根目录，4级包名对应不同的细分模块。</li>
<li>示例：
<ul>
<li>3级包名<code>applicationId</code>：一般为com.公司名.项目名，如com.dohenes.bywanjia 或 com.公司名.Module name，如com.dohenes.shop；</li>
<li>4级包名：com.公司名.项目名/Module name.xxx，具体可参考下图<img src="https://iflytek-duan.github.io//post-images/1576744848085.png" alt="4级包名示例1.png"></li>
</ul>
</li>
</ul>
</li>
<li>
<p>类</p>
<ul>
<li>命名规则：<code>大驼峰式</code>命名，可使用单词或者单词简写，在具体命名类时，会根据该类的类型不同而附加额外的命名规则；</li>
<li>示例：</li>
</ul>
<table>
      <tr>
          <th>类目</th>
          <th>类型</th>
          <th>命名规则描述</th>
          <th>命名示例</th>
      </tr>
      <tr>
          <th>普通java类</th>
          <th>java类</th>
          <th>大驼峰式命名法</th>
          <th>GetTime</th>
      </tr>
      <tr>
          <th rowspan="15">Android相关</th>
          <th>基类</th>
          <th>Base + 类别 / 功能</th>
          <th>BaseActivity / BaseFragment / BaseAdapter</th>
      </tr>
      <tr>
          <th>Activity</th>
          <th>模块名 + Activity</th>
          <th>LoginActivity</th>
      </tr>
      <tr>
          <th>Fragment</th>
          <th>模块名 + Fragment</th>
          <th>LoginFragment</th>
      </tr>
      <tr>
          <th>BroadcastReceiver</th>
          <th>功能名 + Receiver</th>
          <th>BootBroadcastReceiver</th>
      </tr>
      <tr>
          <th>Service</th>
          <th>模块名 / 功能名 + Service</th>
          <th>LoginService / BLEService</th>
      </tr>
      <tr>
          <th>自定义对话框Dialog</th>
          <th>功能名 + Dialog</th>
          <th>TipsDialog</th>
      </tr>
      <tr>
          <th>自定义View</th>
          <th>Custom + 功能名 + 组件名称(继承的组件名)</th>
          <th>CustomToast / CustomLayout</th>
      </tr>
      <tr>
          <th>自定义Widget</th>
          <th>功能名 + Widget</th>
          <th>LoginWidget</th>
      </tr>  
      <tr>
          <th>数据适配器类</th>
          <th>功能名 + Adapter</th>
          <th>WeatherAdapter</th>
      </tr>  
      <tr>
          <th>工具类</th>
          <th>功能名 + Util/Manager</th>
          <th>StringUtil / DatabaseManager</th>
      </tr>  
      <tr>
          <th>帮助类</th>
          <th>功能名 + Helper</th>
          <th>DBHelper</th>
      </tr>  
      <tr>
          <th>解析类</th>
          <th>功能名 + Parse</th>
          <th>GsonParse</th>
      </tr>   
      <tr>
          <th>异常类</th>
          <th>以Exception结尾</th>
          <th>LoginException</th>
      </tr>   
      <tr>
          <th>接口</th>
          <th>多以able或ible结尾，也可在类名前加I标明</th>
          <th>Runnable / Accessible / ILogin</th>
      </tr>   
      <tr>
          <th>回调</th>
          <th>功能名 + Callback</th>
          <th>LoginCallback</th>
      </tr>   
   </table>
</li>
<li>
<p>变量</p>
<ul>
<li>命名规则：小驼峰式命名，在具体命名变量时，会根据该变量的类型不同而附加额外的命名规则；</li>
<li>示例：</li>
</ul>
<table>
      <tr>
          <th>类型</th>
          <th>命名规则描述</th>
          <th>命名示例</th>
      </tr>
      <tr>
          <th>变量</th>
          <th>m + 单词名</th>
          <th>private int mCount</th>
      </tr>
      <tr>
          <th>静态变量</th>
          <th>前缀添加s</th>
          <th>private static int sCount</th>
      </tr>
      <tr>
          <th>临时变量(代码块内的)</th>
          <th>小驼峰式命名</th>
          <th>int count</th>
      </tr>
      <tr>
          <th>常量</th>
          <th>CONSTANT_作用名</th>
          <th>CONSTANT_KEY_NAME</th>
      </tr>
      <tr>
          <th>Android UI控件</th>
          <th>m + 控件缩写 + 功能描述</th>
          <th>mTvTitle / mBtnLogin</th>
      </tr>
  </table>
</li>
<li>
<p>方法</p>
<ul>
<li>命名规则：小驼峰式命名,在具体命名方法名时，会根据该方法名的作用不同而附加额外的命名规则；</li>
<li>示例：</li>
</ul>
<table>
      <tr>
          <th>功能</th>
          <th>命名规则描述</th>
          <th>命名示例</th>
      </tr>
      <tr>
          <th>初始化</th>
          <th>init + 单词</th>
          <th>初始化布局：initView()</th>
      </tr>
      <tr>
          <th>判断 / 校验，返回至为boolean</th>
          <th>is + 单词 / check + 单词</th>
          <th>可见性：isVisible() / checkKey()</th>
      </tr>
      <tr>
          <th>显示/弹出提示框</th>
          <th>show + 单词</th>
          <th>显示提示信息：showTips()</th>
      </tr>
      <tr>
          <th>重置数据</th>
          <th>reset + 单词</th>
          <th>重置用户数据：resetUserData()</th>
      </tr>
      <tr>
          <th>保存数据</th>
          <th>save + 单词</th>
          <th>保存用户名：saveUserName()</th>
      </tr>
      <tr>
          <th>获取数据</th>
          <th>get + 单词</th>
          <th>获取用户名：getUserName()</th>
      </tr>
      <tr>
          <th>清除数据</th>
          <th>clear + 单词</th>
          <th>清除用户名:clearUserName()</th>
      </tr>
      <tr>
          <th>移除数据</th>
          <th>remove + 单词</th>
          <th>移除用户数据:removeUserData()</th>
      </tr>
      <tr>
          <th>绘制相关</th>
          <th>draw + 单词</th>
          <th>绘制线条:drawLine()</th>
      </tr>
  </table>
</li>
<li>
<p>参数</p>
<ul>
<li>命名规则：<code>小驼峰式</code>命名；</li>
<li>示例：如userName,phoneNumber等。</li>
</ul>
</li>
<li>
<p>资源</p>
<ul>
<li>布局资源(布局文件单词都要小写，中间用下划线<code>_</code>隔开)</li>
</ul>
  <table>
      <tr>
          <th>类型</th>
          <th>命名规则描述</th>
          <th>命名示例</th>
      </tr>
      <tr>
          <th>activity布局</th>
          <th>activity_单词</th>
          <th>activity_main</th>
      </tr>
      <tr>
          <th>fragment布局</th>
          <th>fragment_单词</th>
          <th>fragment_main</th>
      </tr>
      <tr>
          <th>dialog布局</th>
          <th>dialog_单词</th>
          <th>dialog_tips</th>
      </tr>
      <tr>
          <th>popupwindow布局</th>
          <th>pw_单词</th>
          <th>pw_net_error</th>
      </tr>
      <tr>
          <th>列表子项布局</th>
          <th>item_单词</th>
          <th>item_message</th>
      </tr>
  </table>
<ul>
<li>控件ID</li>
</ul>
  <table>
      <tr>
          <th>类型</th>
          <th>命名规则描述</th>
          <th>命名示例</th>
      </tr>
      <tr>
          <th>TextView</th>
          <th rowspan="11">模块名_控件缩写_功能单词名</th>
          <th>login_tv_title</th>
      </tr>
      <tr>
          <th>EditTextView</th>
          <th>login_et_userName</th>
      </tr>
      <tr>
          <th>ImageView</th>
          <th>login_iv_userHead</th>
      </tr>
      <tr>
          <th>Button</th>
          <th>login_btn</th>
      </tr>
      <tr>
          <th>CheckBox</th>
          <th>login_cb_status</th>
      </tr>
      <tr>
          <th>RadioButton</th>
          <th>login_rb_gender</th>
      </tr>
      <tr>
          <th>ListView</th>
          <th>main_lv_message</th>
      </tr>
      <tr>
          <th>GridView</th>
          <th>main_gv_cards</th>
      </tr>
      <tr>
          <th>LinearLayout</th>
          <th>login_lt_header</th>
      </tr>
      <tr>
          <th>RelativeLayout</th>
          <th>login_rl_header</th>
      </tr>
      <tr>
          <th>FragmentLayout / TableLayout / ConstraintLayout</th>
          <th>简写对应 fl / tl / cl</th>
      </tr>
  </table>
<ul>
<li>图片资源</li>
</ul>
  <table>
      <tr>
          <th>类目</th>
          <th>类型</th>
          <th>命名规则描述</th>
          <th>命名示例</th>
      </tr>
      <tr>
          <th rowspan = "10">Drawable / mipmap资源</th>
          <th>普通图标</th>
          <th>ic_具体模块_功能</th>
          <th>R.drawable.ic_user_login / R.drawable.ic_launcher</th>
      </tr>
      <tr>
          <th>样式选择器(selector)</th>
          <th>selector_具体模块_适用范围</th>
          <th>R.drawable.selector_login_btn</th>
      </tr>
      <tr>
          <th>样式形状(shape)</th>
          <th>shape_具体模块_适用范围</th>
          <th>R.drawable.shape_login_btn</th>
      </tr>
  </table>
<ul>
<li>动画资源</li>
</ul>
  <table>
      <tr>
          <th>类型</th>
          <th>命名规则描述</th>
          <th>命名示例</th>
      </tr>
      <tr>
          <th>补间动画</th>
          <th>动画类型_方向</th>
          <th>淡入：fade_int；淡出：fade_out</th>
      </tr>
      <tr>
          <th>其余动画</th>
          <th>模块名_动画名</th>
          <th>login_jump</th>
      </tr>
  </table>
<ul>
<li>Values资源</li>
</ul>
  <table>
      <tr>
          <th>类型</th>
          <th>命名规则描述</th>
          <th>命名示例</th>
      </tr>
      <tr>
          <th>color</th>
          <th>模块名_color</th>
          <th>login_color</th>
      </tr>
      <tr>
          <th>style</th>
          <th>模块名_style</th>
          <th>login_style</th>
      </tr>
      <tr>
          <th>theme</th>
          <th>模块名_theme</th>
          <th>login_theme</th>
      </tr>
      <tr>
          <th>string</th>
          <th>模块名_作用名</th>
          <th>user_name</th>
      </tr>
  </table>
<hr>
</li>
</ul>
<h1 id="关于app打包命名">关于App打包命名</h1>
<p>release版本在项目混淆、加固(目前采用360加固)的基础上，按照以下规范命名，其它情况不考虑：<br>
<a href="https://www.jianshu.com/p/d7dc4624a122">【Android】apk打包命名规则交流篇</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】29-硅谷互联网公司的开发流程]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-29-huo-gu-hu-lian-wang-gong-si-de-kai-fa-liu-cheng</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-29-huo-gu-hu-lian-wang-gong-si-de-kai-fa-liu-cheng">
        </link>
        <updated>2019-12-09T02:43:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言硅谷互联网公司的开发流程">前言：硅谷互联网公司的开发流程</h1>
<p>总的来说，硅谷互联网公司的开发流程包括以下几个阶段：</p>
<ol>
<li>OKR的设立；</li>
<li>主项目及其子项目的确立；</li>
<li>每个子项目的生命周期；</li>
<li>主项目的生命周期；</li>
<li>收尾、维护、复盘。</li>
</ol>
<hr>
<h1 id="第一点okr的设立">第一点，OKR的设立</h1>
<p>所有项目的起始，都应从Roadmap做起。硅谷公司的OKR（Objectives and Key Results）一般都是自顶而下的。也就是说，先有整个公司的OKR，然后有每个部门的OKR，继而是大组的OKR，再到小组的OKR，确保整个公司有一致的目标。在这个过程里面，技术驱动反映在哪些方面呢：</p>
<p>首先，确定Roadmap的过程中，我们会采用调查（Survey）模式，确保工程师的声音可以准确地触达管理层。比如:工程师们觉得基础架构比较薄弱，公司就会加大这一块的支持力度。如果大家觉得开发环境很低效，就会把这个因素也放到OKR考虑。硅谷的公司一般会分为产品组和系统架构组。总的来说，系统架构组的OKR里，工程师的声音会很大。</p>
<p>其次，项目怎么做，怎么规划，一般是由工程师来决定的。OKR只确立目标，是不是要构建新的服务，是不是要沿用现有架构，如何进行技术选型等，这些不是OKR的组成部分。</p>
<p>最后，估算OKR里的工期目标的时候，我们会去除一些用来做技术创新和支持的时间，比如编程马拉松，开源支持等事务。谷歌的员工会给自己预留20%的自由项目时间，这些都是时间缓冲区。</p>
<blockquote>
<p>OKR是企业进行目标管理的一个简单有效的系统，能够将目标管理自上而下的贯穿到基层。</p>
</blockquote>
<hr>
<h1 id="第二点主项目及其子项目的确立">第二点，主项目及其子项目的确立</h1>
<p>一旦确立了OKR，下一步就是确立主项目和子项目了。主项目是主要的技术或商业产品，一般由产品经理、技术经理和一些技术骨干经过产品需求和技术讨论后，确定要做什么（Scope），不做什么（Non Scope）和大的里程碑（Miliestone）。</p>
<p>一旦主项目确定了，就需要安排不同的人做不同的模块，也就是子项目。一般团队协作有两种模式：一种是每个人负责一个子项目，从始至终；另一种是大家先一起完成基本架构，然后逐个需求、逐个模块推进，最终一起完成整个项目。</p>
<p>下面，我来谈谈两种协作模式在实践中的优缺点对比：<br>
<strong>第一种方法：每个人完成一个子项目</strong></p>
<ul>
<li>优点<br>
责任清晰，每个人都知道自己的职责，工程师也有更多的拥有感，他们可以独立负责产品的设计、实现、测试和维护，工作贯穿整个项目流程。</li>
<li>缺点<br>
如果负责某个子项目的工程师设计或者实现能力不足，由于比较独立，这个子项目很容易成为路障或者瓶颈，工程师之间也缺乏相互学习的机会。<br>
另外，因为是按人并行推进项目，需要根据每个人设置里程碑，管理的时候，技术管理者需要常常跟进每个人的进度，管理代价更高。代码审核也往往是几个有限的人参与。</li>
</ul>
<p><strong>第二种方法：所有人一起逐次完成每个模块或需求</strong></p>
<ul>
<li>优点<br>
工程师之间合作最大化，可以彼此协调、彼此学习、在对方有事的时候相互补位。项目管理有明确统一的里程碑，每个工程师都有机会接触更多的工作，每个人的代码可以有更多的人参与审核。</li>
<li>缺点<br>
每个工程师的责任划分并不是那么明显，很容易出现能者多劳、勤者多劳的现象。一些新人总是做一些执行或打杂的事，得不到锻炼。</li>
</ul>
<p>这两种模式对比来看，它们各有利弊。现实中可以根据情况组合使用。比如，两到三人合作负责一个模块，也可以在每人一个模块的基础上，将小模块合并成大模块。然后每个大模块都有技术负责人（Tech Lead），对一些能力不足的工程师给予指导和支持等等。</p>
<hr>
<h1 id="第三点每个子项目的生命周期">第三点，每个子项目的生命周期</h1>
<p>子项目一旦确认，它的生命周期就会融入到工程师的日常工作中，内容如下：</p>
<ol>
<li>
<p>开发初期的设计文档<br>
一般可以使用共享的谷歌文档（Google Docs），Quip等（国内一般用腾讯文档、石墨文档多一些）。不同的人可以编辑或评论、阅读。一般设计文档会先由组内工程师和产品经理审核，然后到大组评审（包括Legal，Compliance，Fiance等）。</p>
<p>如果涉及到公司的整体架构，还需要发给全公司审核。参与审核的人员是所有工程师。很多人会有选择的参与一些设计的审核，通常技术骨干会预留时间审核所有的技术设计文档。设计文档不仅包括怎么实现，还有选型理由、考虑的因素、支持和不支持的属性、时间线等等。</p>
</li>
<li>
<p>设计测试实验，这是可选的，如果针对某个产品需求我们想知道用户的反馈，就需要数据工程师参与设计实验，也就是A/B测试。实验中的数据埋点也会在下一步实现中完成。</p>
</li>
<li>
<p>一旦设计文档锁定，就可以开始实现了。不论是单人负责还是多人合作，实现都是按照多次代码提交（Pull Requests）来迭代的。每次代码提交都要写清楚代码改动的摘要和测试。并通知不同的工程师审核。</p>
</li>
<li>
<p>所有的实现都要加入监控、日志、预警代码。</p>
</li>
<li>
<p>所有的实现都隐藏在一个开关后。当代码就位后，就开始灰度发布。通常是先发布给几个开发人员测试，然后到项目组，然后到其它员工（Google称之为Dog Food，因为他们可以大量使用自己的产品），然后按照百分比推给用户。</p>
</li>
<li>
<p>对一些需要重构的关键产品链路，有时候也会使用双重写（Dual Write），就是新特性和就特性都写入数据库，并通过不同的方式比较两个实现的结果。只有验证结果一致时，才会将交易（Traffic）从旧实现切换到新实现。</p>
</li>
<li>
<p>最后是一些扫尾工作，包括移除用来做A/B测试和灰度发布的代码开关等，有时候还会有一些次要需求的实现。</p>
</li>
</ol>
<hr>
<h1 id="第四点主项目的生命周期">第四点，主项目的生命周期</h1>
<p>主项目的生命周期根据子项目的实现方式会有所不同，但有些特点是共有的。</p>
<ol>
<li>项目开始都有一个整体的设计文档，界定子项目的范围和相关性、时间线等等。</li>
<li>在所有子项目进行的过程中，有时候会发现一些共同需要的架构或服务，可以单独提取成公共服务或库，比如一个调度服务，或者一个幂等实现等等。</li>
<li>给相关人员做进度报告，包括主项目的里程碑。</li>
<li>由于子项目完成时间可能不一样，需要进行人员的重新配置。</li>
<li>在开发过程中不断更新文档。</li>
<li>因为不确定的需求变动，会取消或者生成新的子项目。</li>
<li>有时候，也会因为公司的方向变化或战略调整，对主项目做比较大的变更，同时对应调整相关的子项目。</li>
<li>在项目开始和结束的时候，需要做好对外的交流和沟通。一来确保自己的项目改动不会影响倒期他的项目，二来让将会依赖这个项目的产品组了解相关信息，确定计划。</li>
</ol>
<hr>
<h1 id="第五点收尾-维护-复盘">第五点，收尾、维护、复盘</h1>
<p>整个项目结束后，一般都会做一些代码清理和文档的更新和整理，有时候还需要写新的用户手册或Wiki等。一些基本的错误和异常处理要写到运维手册（Oncall Playbook）里，便于以后运维的人知道怎么处理一些已知的问题。</p>
<p>每个项目结束后都会进行复盘，总结整个项目的教训和经验。有时候还需要在组内做些演讲，让更多的人了解这个项目。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】28-如何激发团队人员的责任心]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-28-ru-he-ji-fa-tuan-dui-ren-yuan-de-ze-ren-xin</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-28-ru-he-ji-fa-tuan-dui-ren-yuan-de-ze-ren-xin">
        </link>
        <updated>2019-12-06T02:58:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="如何激发团队人员的责任心">如何激发团队人员的责任心</h1>
<p>英文中有两个词很有意思：Accountability和Responsibility，大体可以翻译成“责任”，但是细细品味，却在用法上有所不同。Accountability有点儿问责、责任制的意思，是一个由外向内的原则和约定，让某一个人对某件事负责的意思；Responsibility虽然有类似的意思，但更多的是一种道德和义务上的责任心、责任感的意思。</p>
<p>在公司和团队里，这两种责任都不少见。不过Accountability不是自发的，而是通过交涉、讨论、约定，最终决定由谁来负责，并要求责任人同意负责这件事。比如保质保量按时完成某个项目中的某一个模块，是产品经理的责任，哪些需求需要使用哪些技术实现，是某个工程师的责任，等等。</p>
<p>Responsibility是责任心和责任感，是一种更强烈的自发责任，员工从内心深处觉得自己对某件事、某种集体利益和荣誉具有不可推卸的责任。公司里有一些没有具体岗位划分和衡量标准的工作，比如处理不是自己职责范畴的Bug、帮助别人答疑解惑等，具备Responsibility的人回去主动承担这些工作。</p>
<p>从某种程度上来说，责任心更多是一种抽象的概念，很难去培养，即使可以培养，也是个漫长的过程。除了员工自身的素质，公司或团队的规模和文化、公司的发展前景、员工的信息、平均水准和表现等等，都是影响责任心培养的元素；但是，责任心在团队里的作用却很大，有责任心的团队，战斗力和生命力都是异常强大的。</p>
<p>作为管理者，如何去激发团队人员的责任心呢？可以从以下三个方面考虑：</p>
<ol>
<li>明确责任制，尽可能通过规划来明确和规范责任心、责任感相关的事情；</li>
<li>让责任制变得有效，而不是形同虚设。每个人真正的对自己那块业务负起责任来；</li>
<li>尽可能地让团队成员充满归属感，进而激发他们的责任心。</li>
</ol>
<p><strong>首先说说明确责任制</strong>，怎么把一些没有明确职责范围的事变成职责呢？有一些不同的方法可以尝试。比如，适当放权，让团队人员不是负责执行一些事情，而是对某一块业务具备完全的决定权，也就是说，让他们去主导一些事情。这样员工会认为自己对项目有完整的所有权，进而具备责任心。</p>
<p>当然，由于人员的流动、项目组重组等原因，这种全权负责的项目制度还是会产生灰色地带，比如前面一个人项目做到一半就离职或者被抽调到其它组去了，那后期的Bug修复和改进要怎么做呢？</p>
<p>如果项目剩下的工作还很多，可以找一个工程师接手并担起全部责任。如果剩下的工作不多，而且很零散，可以通过一种守门员机制，组里的人每周轮流值班，负责这一周与该项目相关的各种杂活，比如处理用户反馈，修复Bug等等。</p>
<p>另外，还要有适当地激励机制，对于主动承担责任的员工表示认可和感激，适当的物质奖励也是可以的。他们自发地做了一些对团队有益的事情，承担了本不属于自己的责任，理应得到其他人的尊重。</p>
<p><strong>其次，让责任制变得有效而不是形同虚设</strong>。关键点是让责任人意识到承诺了就要努力做到，如果承诺的事没做，需要承担后果，而不是没人在意。</p>
<p>比如某个Bug引发了事故，大家只是去修复Bug，但是没人去跟进Bug是怎么产生的，造成了什么影响，后续怎么预防，那Bug就会越来越多。如果项目延期，大家只是继续延后项目完成的时间线，而不是去分析为什么延期，如何赶上进度，是否需要外部资源的支持，那期限就会变得可有可无。</p>
<p>有效的责任制，在开始的时候就要让所有人明确责任与权力，而不是最后追究责任或推卸责任。</p>
<p>在这个基础上，根据每个人不同的情况，在执行过程中适度跟进。发现问题的时候，及时指出来，但这时需要的是，管理者要用关心的口吻，而不是追求的态度，让对方了解到问题出在哪里。不要因为做好人而什么都不说，那样只会让小问题扩散成大问题。多花时间，让对方认识到问题所在，而不是把你的主观感觉强加于人，用引导的方式，会更好的激发团队责任心。</p>
<p>不要变成一个微观管理者，也不要成为一个纯粹的规则执行者。那样对团队人员的责任感、上进心和积极性等，都有害无益。</p>
<p><strong>最后谈谈归属感</strong>。归属感是指某个人对某样事物、组织的从属感觉，是一种主观的个人感受。</p>
<p>比如一个对公司有归属感的人，会对公司产生一种“家”的感觉，觉得自己是公司的一分子，会非常在意公司发生的一切，并希望公司发展得更好，自己也会有更多的空间；相反，如果员工对公司没有归属感，始终会认为自己是这个公司的过客，总有一天会离开的，自然也谈不上什么责任心，能够做一天和尚撞一天钟就不错了如何增加员工的归属感呢？首先要在有利公司发展的基础上建立独特的企业文化，创新、公开透明、积极向上，这些因素可以留住更优秀的员工。需要强调的是，公司不是温情脉脉的家，公司是一艘大船，有了方向，大家合力划桨，才能到达理想的彼岸。想要优秀的人产生归属感，仅仅靠丰厚的薪酬待遇和舒适的工作环境是不够的，他们还需要远大的目标和坚定的信念，只有真正伟大的创见，才能让这些优秀的人与公司一起往前走。除此之外，管理者还应该以身作则，让员工看到自己的努力，对公司目标的追求，对企业文化的践行。真诚对人，能够从员工角度考虑问题，对好的行为认可并加以鼓励，同时做一些仪式感比较强的团队活动和建设，都是增加员工归属感的好方式。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】26-如何做自己的职场规划]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-26-ru-guo-zuo-zi-ji-de-zhi-chang-gui-hua</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-26-ru-guo-zuo-zi-ji-de-zhi-chang-gui-hua">
        </link>
        <updated>2019-12-03T03:26:53.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-在做职场规划前自己需要考虑什么">一、在做职场规划前自己需要考虑什么？</h1>
<p><strong>做一个职场规划时，你作为当事人，自己先要想清楚很多问题，然后再和你领导交流沟通，寻求他的支持和帮助。</strong></p>
<p>那么，下面的问题是你首先要考虑的：</p>
<ol>
<li>你的个人价值观是什么，最在意什么？换句话说，什么样的情境或者状态会让你有幸福感或者自信心。比如，在你的成长路上哪些是你在意的，是独立解决问题的能力，还是挑战别人做不到的事情；是受欢迎程度，和所有人有良好的关系，还是更在意自由、健康的家庭生活。</li>
<li>你的长期愿景是什么，五年甚至十年后，你希望自己成为一个什么样的人？</li>
<li>为了达到目标，你还需要哪些技能或经验？你可以在短期内发展什么技能让你走得更远？想达成你的梦想职业，或者在工作中取得成功，你还需要做什么，需要哪些必备的计能？哪些计能对你来说不是必须的，但是会有很大好处？</li>
<li>你的优势和长处是什么？是合作性、独立思考、行动快速，还是有良好的产品思维。你现在的日常工作能否让你展示自己的长处，又是如何展示的，你觉得你比别人在哪些方面做的好，能不能举出写具体的例子？</li>
</ol>
<p>当你想清楚以上问题的时候，大概就知道自己想要什么了。如果你是一个管理者，也可以试着用这些问题去启发你的团队队员。</p>
<hr>
<h1 id="二-需要领导提供什么样的支持">二、需要领导提供什么样的支持？</h1>
<p>在思考完自己的问题后，接下来，也就是最重要的问题就是：<strong>你需要你的领导者提供什么样的支持？</strong><br>
例如:</p>
<ol>
<li>需要一个能够证明自己的项目；</li>
<li>需要一个能带自己的老员工，这个员工可能是你的榜样（Role Model），也可能是为你提供日常指导的人；</li>
<li>需要更多练手的机会；</li>
<li>需要专注培养自己的某一项技能；</li>
<li>需要让自己接触更多的业务或者架构相关的讨论；</li>
<li>需要参加一个系统的培训。</li>
</ol>
<p>在这些问题或者要求提出之前，你应该考虑到领导者的资源和整体项目进度，也就是说，领导者在提供这些支持之前，很可能会有一些限制或者要求。</p>
<p>比如，你想要一个能证明自己的项目，那么在你承担重任之前，可能需要完成另外一些不那么重要的项目，甚至是脏活累活来证明自己。这种情况下，沟通的关键就是契约，你需要如何证明自己，才能去做自己喜欢的项目，组里是不是有人明显比你胜任的多？</p>
<p>比如，你需要一个能够带着自己往前走的老员工，那你就要知道，对新人的指导会花费老员工很多时间和精力，当你这样要求的时候，是不是可以提供一些力所能及的回馈呢？比如主动帮助老员工做一些他手上的杂活，也可以把老员工传授给你的经验写成文档，这样，你被指导了一次，却留下了以后新人都能使用的文档资源。老员工会更愿意去带这样的新人。</p>
<p>比如，你想接触更多业务和架构相关的讨论，那你是否按时完成了自己的本职工作？如果你自己很勤奋，虽然参与了各种讨论，但自己的工作完成得又快又好，甚至利用自己的休息或娱乐时间做了一部分工作，这样领导者才不会有顾虑。如果你作为新人，该做的工作没做，整天参加各种讨论开眼界，这让领导者怎么管理团队里的其他人呢？</p>
<p>在这个过程中，作为员工，不要提过于脱离实际的要求。作为管理者，要明确的让对方了解不让他承担这个项目的理由是什么，风险在哪里，让对方知道自己的不足，并提供机会让他先提升这方面的技能。</p>
<p>你和你的领导都应该明确，所有的支持和帮助对你的长期目标和短期发展都是有益的。不要提一些似是而非的需求，也不要人云亦云，如果这些要求不会让你离你的目标越来越近，那就是无用功。</p>
<p>得到领导者的支持和帮助后，剩下的就是让这一切变得可执行和可追踪。你可以和你的领导一起为你的“成功”或“进步”定义一些可测量的标准，制定可执行的行动计划，然后记录你的发展，按时和你的领导进行一对一沟通，讨论你的进步，反省做的不够和不好的地方。需要的话，你可以适时地调整你的计划，完成自我发展。</p>
<hr>
<h1 id="总结">总结</h1>
<p>如何做自己的职场规划？我们来总结一下，你需要完成以下四个步骤：</p>
<ol>
<li>知道自己想要什么，知道现在的你和理想的你差距在什么地方；</li>
<li>和领导者沟通，得到一些有前提或者回馈的支持或帮助；</li>
<li>设定目标，制定一个你和你的领导都同意的计划和期限，确保计划会让你和目标更接近；</li>
<li>让计划变得可执行和可追踪，按部就班的完成和跟进，同时根据情况调整不合理或者不完善的地方，持续改进。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】25-兼容并包的领导方式]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-25-jian-rong-bing-bao-de-ling-dao-fang-shi</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-25-jian-rong-bing-bao-de-ling-dao-fang-shi">
        </link>
        <updated>2019-12-02T08:27:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<blockquote>
<p>你可能听说，很多硅谷公司都有个不成文的规定，叫做“多样化（Diversity）”，这是什么意思呢？<br>
简单来说，就是要求公司在招聘人才的时候，尽可能保持员工组成的多样化。</p>
</blockquote>
<hr>
<h1 id="一-为什么要保持员工组成的多样化">一、为什么要保持员工组成的多样化？</h1>
<p>第一个原因是，互联网时代的市场组成是多样化的。很多欧美产品在中国市场的销售额是公司营收的主要组成部分，国内很多产品也都开始具备国际化意识，逐步介入欧美中东等地区的市场。</p>
<p>并且，硅谷地区的人口结构和美国整体是不同的，多次殖民和移民的历史，让硅谷的人口本身就呈现多样化，也因此硅谷公司的国际化视角从创建之初就有了。</p>
<p>在思维方式上，我们希望在构建产品的时候就开始兼顾市场的多样化，比如考虑设计、本地化、语言、使用习惯等等，而多样化的员工可以更好地帮助实现产品多样化的功能特性。</p>
<p>第二个原因是，产品的用户也是多种多样的。每个客户会希望产品具有个性化特性，也就是有“这个特性感觉上是为我做的，更适合我使用”的需求。因此，要保持产品的竞争力，就需要了解更多客户的不同需求。</p>
<p>产品或者平台怎样才能让每个用户都能体验到想要的个性化呢？这就要求设计者必须意识到用户的多样化和需求的差异化，也就从根本上要求了组成设计者的员工是多样化的。</p>
<hr>
<h1 id="二-如何才能保持员工的多样化">二、如何才能保持员工的多样化？</h1>
<p>首先，多样化可以体现在国际、性别和人种这种外部区别上，比如：白种人、黄种人、黑人都要保持一定的比例；性别上也要求保持平衡，也就是比较健康的男女员工数量。还有一些公司会要求有一定比例的同性恋、不同类型的宗教徒等等。</p>
<p>其次，员工的多样化也可以体现在团队内部的差异上，互联网时代需要多种多样的人才，人才库的组成也应是多元化的。一个团队里，需要具备开创性思维、敢打敢拼的人，也需要一些能够深思熟虑，以及能够把事情落地和执行的人。</p>
<p>最后，员工的多样化也体现在团队的创新思维上。一个公司，如果有一个Idea，一个产品，那么这个公司早晚会被时代的大潮抛弃。比尔·盖茨曾经说过：“组织要么创新，要么死亡”，就是这个道理。</p>
<p>因此，团队内部需要有创新者，或者是“异见人士”的存在，他们的思路和见解并不是总和产品的主要设计者保持一致；这种情况下，团队很难“想到一块去”，也就保持了团队创新的活力。</p>
<p>有一些不同的声音，对于“哪些重要，哪些该做”有些不同的看法，哪怕这些方法在初期会被认为风险太高、太离谱，但在某种程度上，它们会让团队的活力更持久。</p>
<hr>
<h1 id="三-领导需要具备兼容并包的思维">三、领导需要具备兼容并包的思维</h1>
<p><strong>多样化的员工组成保证了多样化的企业文化，所以在很多时候，这也要求领导者要具备兼容并包的思维。</strong></p>
<p>“包容性领导的六个特征”（The six signature traits of inclusive leadership）一文中提出了一种新的领导方式，文中认为领导者应该具备以下六种计能或特征：</p>
<ol>
<li>坚定的承诺<br>
领导者需要从内心深处认为多样化和融合是一个正确的人生观和价值观。保持开放接纳的心态，平等对待每一种人和文化，对企业有益。</li>
<li>谦卑的勇气<br>
领导者不要有盲目的自我优越感，而应该客观的看待自己的优点和缺点。对待他人都要保持一种谦虚的态度，无论他们是何种教育背景、人种、性别。</li>
<li>正确的认知<br>
领导者需要知道自己和企业有盲点、有偏见，知道问题出在哪，知道解决问题的方向。</li>
<li>开放的心态<br>
领导者需要真诚地渴望了解不同人的看法，可以接受别人的一些价值观，并且知道所有的事务都有一定程度的不确定性。</li>
<li>高情商<br>
领导者能够和不同职位不同职业背景的人愉快合作和交流。哪怕不是百分之百的认可，也可以很专业地处理。</li>
<li>合作的意愿<br>
给每个人施展的机会和空间，提供公平和安全感，哪怕这意味着额外的代价和麻烦。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】24-编程语言漫谈]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-24-bian-cheng-yu-yan-man-tan</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-24-bian-cheng-yu-yan-man-tan">
        </link>
        <updated>2019-12-02T02:23:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1初学者不要纠结先学哪种语言">1.初学者不要纠结“先学哪种语言”</h2>
<p>初学者在先学哪种语言上花费时间纠结很不值得，还不如随便挑选一个语言，跳进去游几圈试试。对于工程师来说，学会第一种编程语言只是万里长征的第一步，只要你还在这个领域，就不可能只学习一种语言，只会一种语言的工程师根本不能称之为工程师。</p>
<hr>
<h2 id="2只有先掌握好一种语言才能快速学好其它语言">2.只有先掌握好一种语言，才能快速学好其它语言</h2>
<p>如果你不能用一种编程语言的基本特性写好代码，那换成另外一种语言也无济于事，你会写出同样差的代码。比如，你的Java很糟糕，那么换成Go、Ruby，你的代码也会同样糟糕、甚至更差。</p>
<hr>
<h2 id="3脚本语言也可以作为入门语言">3.脚本语言也可以作为入门语言</h2>
<p>很多人觉得不要用脚本语言入门，我觉得不一定，尤其是现在就着人工智能的浪潮搞机器学习的人，用Python入门就挺好。另外，脚本语言在面试中占优势。平时找工作Ruby、Python、C++和Java熟练度差不多，但面试中使用Ruby或者Python答题，写代码的时间估计是两者的一半。</p>
<hr>
<h2 id="4不要有明确的前后端分隔">4.不要有明确的前后端分隔</h2>
<p>后端工程师要熟练掌握一门前端语言，前端工程师也要熟练掌握一门后端语言。倒不是为了提倡全栈或多能力储备，而是两者的编程思维模式很不一样。知己知彼，在架构设计和解决具体问题时，才会更精确的判断。</p>
<p>另外，现在大前端的概念也比较流行，也就是大前端工程师能同时掌握Web编程语言、iOS和Android编程语言，原生技术（iOS和Android）和Web的配合越来越紧密。</p>
<hr>
<h2 id="5sql是一门非常重要并且应该熟练掌握的语言虽然它不能被称为编程语言">5.SQL是一门非常重要并且应该熟练掌握的语言（虽然它不能被称为编程语言）</h2>
<p>如果你平时的编程工作中涉及到业务功能，而不是纯粹的技术架构，一定会使用到数据库。SQL就是数据的语言，通过它，你可以和数据建立连接和沟通。</p>
<p>如果你数据访问模式写的很差，轻则代码性能一塌糊涂，重则引发Bug，而涉及数据的问题，Bug等级都比较高，后果可能很严重。</p>
<hr>
<h2 id="6工程师要具备搭建测试框架的能力">6.工程师要具备搭建测试框架的能力</h2>
<p>无论什么语言，工程师都应该能够基于这种语言搭建测试框架，写好测试代码和写业务代码一样重要，甚至更重要。工作后你会发现，可能有时候我们只花五分钟写了一个程序，而为其写一个能差不多覆盖所有功能路径的测试用例集却花了一个小时。</p>
<hr>
<h2 id="7在任何时候都要用并发的-分布式的思维去看待你的程序">7.在任何时候都要用并发的、分布式的思维去看待你的程序</h2>
<p>因为竞争条件或者并发中的不确定因素（比如调用顺序）导致的Bug，仅仅理解语言的基本特性，根本不能解释。</p>
<p>每种语言都有自己的并发编程模式（比如Go的Goroutine，Java的ForkJoinPool，Swift的Swift Grand Central Dispatch等）。学习每一种语言，都应该深入了解它的并发模型，在这个多核的时代，不懂并发的程序员不可能是个好工程师。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】23-如何处理工作中的人际关系？]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-23-ru-he-chu-li-gong-zuo-zhong-de-ren-ji-guan-xi</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-23-ru-he-chu-li-gong-zuo-zhong-de-ren-ji-guan-xi">
        </link>
        <updated>2019-11-27T08:18:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<blockquote>
<p>当我们初入职场时，职能级别可能比较低，大部分工作会比较独立，即使不是特别善于处理各种人际关系，问题也不算大，一来你不用协调资源，独立工作会占主要部分，很多时候都是处于闷头做事的状态中；二来，组里会有一些老员工，可以帮助你做各种沟通工作。<br>
但是，若想职场进阶，一直往前走，到了某个阶段，比如需要你去做更多的协调和沟通工作而不仅仅是写代码的时候，如何处理人际关系就成了一项必不可少的软技能，重要性不比技术上的硬计能低。</p>
</blockquote>
<hr>
<h1 id="如何更好的处理工作中的人际关系">如何更好的处理工作中的人际关系</h1>
<ul>
<li>
<p><strong>首先，对于自己的上下级，保持开放的心态和愿意沟通的态度十分重要</strong><br>
上下级是在职场中最无法避免的人际关系，因为各人性格不同，可能你和有些人更容易在看法和决策上达成一致，而有些人则经常不能很好的理解别人的意图，需要多次沟通，采用对应的沟通方式。上下级之间的利益关系大多时候是绑在一起的，如果处理不好，对彼此的工作有很大的影响不说，很多时候还会发生不愉快的事情。</p>
</li>
<li>
<p><strong>其次，在交往过程中，尽可能地对别人分享、工作、交流持一种积极、友善和鼓励的态度</strong><br>
我们常常把处理人际关系的态度分为三类。第一类是给予者，这类人，不怎么计较得失，总是尽最大可能的去帮助和支持别人。第二类人秉承对等关系，谁对他好，他就对谁好，自己帮了别人一次，或者别人帮了自己，都是一个人情，都会记在内心的小本本上，那是一个无形的账本。第三类人是索取者，这种人只会跟对自己有帮助的人接触，做的事也是从自身的利益出发。</p>
<p>当提到这三种人时，我们脑海里可能会浮现出一些人物形象并对号入座，甚至还会想到现实中这样的例子。对于自身来说，大部分时候我们会认为自己是第一类人，也可能是第二类人，或者是介于第一跟第二类人之间，总之，绝对不会认为自己是第三类人。</p>
<p>这其实说明了人们的潜意识里都认可第一类是最积极向上的处世之道，然而在现实中，因为能力、对方态度、利益关系等各种因素，我们能表现出来的“不计较得失”就可能有很大的局限性。</p>
<p>如果我们每个人都向“给予者”的方向努力，那么便容易建立一个正能量满满的工作环境，与别人的交流也会更加顺畅。</p>
</li>
<li>
<p><strong>第三，加入一些有利于自己成长的社交圈子</strong><br>
比如特定技术有共同的兴趣社区，对摄影、读书有共同爱好的小组等。这些圈子可能很大很正式，比如一些商业组织，也可以是几个有共同困难或者目标的同事组成的微信群，平时进行一些非常随意的常规讨论。</p>
</li>
<li>
<p><strong>第四，是当地寻求帮助</strong><br>
很多时候主动向另一个人表示你需要他的帮助，其实会很巧妙的增加两个人的亲密度。当然，不要问不值得问的问题，注意是不是会耽误对方太多的时间，自己的态度也尽可能的开放、谦逊。</p>
<p>反之，如果别人向你寻求帮助，尽可能耐心地协助对方解决问题，如果很忙或者时机不对，就告诉对方，并问是不是可以换个时间。如果对方比你资历浅，或者问的问题太简单，也不要摆架子或者显得很不耐烦。</p>
</li>
<li>
<p><strong>第五，对于别人的意见要尽可能的认真对待</strong><br>
即使没有任何实际行动，也让对方明白你的想法，为什么你没有采纳他的意见。自己给别人的意见也要诚恳，如果是个人看法，不要强迫于人，尤其不要拿一些理论上有争议的看法强迫别人接受，比如哪个设计模式更好。如果是真实案例里并且会影响到项目进展的对错，尽可能地摆事实举例子让对方明白你的想法和出发点，本着把事情做好的原则去沟通。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】22-不要做微观的管理者]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-22-bu-yao-zuo-wei-guan-de-guan-li-zhe</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-22-bu-yao-zuo-wei-guan-de-guan-li-zhe">
        </link>
        <updated>2019-11-26T02:14:40.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<blockquote>
<p>每个管理者都有其独特的管理风格，有的管理者在做项目时喜欢频繁的跟进和指导，很多并不重要的技术决定也会给出自己的想法，而不是让组员做决定；有的管理者更倾向于给组员一定的自由度，在项目实施过程种，有一定的计划和安排，只需要了解组员在作什么、为什么这么做、什么时候完成。千人千面的管理风格，不论是通过什么手段、方式，最终的目的还是为了项目更好的完成。</p>
</blockquote>
<hr>
<h1 id="一-因人而异">一、因人而异</h1>
<p>我们共同的同事，大部分都是很优秀的人。他们和你一样进入这个公司，每个人都经历了差不多的考察和审核，每个人的能力都是毋庸置疑的，但每个人的优点和缺点，擅长的领域，往往各不相同。</p>
<p>有些人在全局规划、协调资源方面有更强的能力，有的人则注重细节，可以把定义好的任务完美完成。有的人善于思考，有的人擅长交流，有的人专注执行......我们要做的，是最大程度的调动并发挥其长处，并帮助他在短板方面获得更快地成长。所谓用人用其长，就是这个道理，说起来容易，要真正做到，还要不断调整和练习。</p>
<p>另外，每个人都不是一成不变的。再有能力的一个人，刚进到一个公司，一个小组，接手一个项目，都需要时间和资源去学习相关的背景知识。如何给他们充分的资源、信息和指导，又同时给他们足够的空间，往往不能一概而论。</p>
<p>如果是工作多年的职业工程师，尽管各个公司的一些流程和工作方式不太一样，你只要给出指导性的建议和准则，他们就能很快时应调整。如果是刚从学校毕业的新人，那么从各种工具的使用、开发流程的熟悉、代码的规范化，都需要更多的指导。这样的人往往需要安排一个有经验的工程师去带，才能获得最快的成长速度。</p>
<hr>
<h1 id="二-因事而异">二、因事而异</h1>
<p>先问问自己，这个任务在项目中是不是很重要，是不是很紧急。如果是，并且每一步的完成都有很强的时间限制，在“怎么做”的方面会因为各种要求或者限制并没有太多的发挥余地，那么，这时候，更多的介入是你最好的选择，不过在介入之前，你需要让对方理解为什么需要频繁沟通。</p>
<p>如果单个任务在整个项目中有一定的试错空间，或者不在时间线的关键路径上，这时，你不妨试着放手让组员尝试独立完成。管理者这样才能够鼓励创新，并可以增强组员的工作积极性。因为组员全权负责任务，即使出了错，他也会更有责任感和经验去改进。</p>
<p>也许有人觉得，我的整个项目时间都非常紧，任何一个点都不容易出错，那么你就应该去思考，如何规划整个项目时间和人员的安排，尽可能去创造一个可以让员工发挥的空间。如果什么也不能放手，除了对员工的积极性有负面的影响，你的时间和精力，也将进入一个无法扩展的工作轨道。</p>
<hr>
<h1 id="三-跟进的粒度">三、跟进的粒度</h1>
<p>关于跟进粒度，最极端的两种方法就是：只设立目标，然后完全放手，这样的做法是等你意识到事情已经脱离轨道的时候，往往很难拉回正轨或者补救；另一种是每个细节都按照你的想法去推进，这就无法让员工发挥自己的能力。作为管理者，我们需要在两种极端中找一个平衡。</p>
<p>根据前面提到的两个原则，根据不同的人和事，我们应该做到以下几点：</p>
<h2 id="1制定目标确保传达">1.制定目标，确保传达</h2>
<p>管理者应当非常清楚的说明你想要的结果是什么样子，并明确地告诉员工：他的责任是达成什么目标，你会通过结果来衡量他们。</p>
<h2 id="2多给指导少亲手做">2.多给指导，少亲手做</h2>
<p>管理者无须事必躬亲，也不要监视每一个细节。你只需要花一些精力确保你的意图已经被明确传递了，管理者的存在不是分担实际工作，而是一种资源，更是背后支持力量。</p>
<h2 id="3设定频率保持跟进">3.设定频率，保持跟进</h2>
<p>根据对方的经验和任务的紧急度，设定一个常规的跟进频率。每次跟进了解工作进展，是否有拦路石需要帮忙清除。除此之外，给对方足够的决定权。</p>
<h2 id="4交流难点给出建议">4.交流难点，给出建议</h2>
<p>当进度受阻时，你需要与员工交流，搞清楚问题所在，是能力问题、资源不够、还是时间紧张。根据交流成果，你可以给出一些建设性的建议和意见，帮助其提高能力，但不要直接上手帮忙完成任务。</p>
<hr>
<h1 id="四-交流的重要性">四、交流的重要性</h1>
<p>在日常项目开发中，交流是非常重要的。人与人之间交流太容易产生信息丢失，很多时候我们都以为双方交流的信息达成了一致，结果确认的时候发现完全不是一回事。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】21-中美在支付技术和大环境下的差异]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-21-zhong-mei-zai-zhi-fu-ji-zhu-he-da-huan-jing-xia-de-chai-yi</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-21-zhong-mei-zai-zhi-fu-ji-zhu-he-da-huan-jing-xia-de-chai-yi">
        </link>
        <updated>2019-11-21T07:12:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-概况">一、概况</h1>
<h2 id="1支付系统的定义">1.支付系统的定义</h2>
<p>当我们谈支付系统的时候，一般会这样定义：一笔钱从甲方转到乙方。这笔转移可能是商家和顾客之间的货款交易，也可能是个人对个人的转账，支付系统就是让这笔转账或交易发生的系统。这中间可能是银行间的转账，也可能是一个虚拟的闭环系统，比如在支付宝、PayPal、甚至比特币系统中的价值转移。</p>
<h2 id="2支付的发生场景">2.支付的发生场景</h2>
<p>用到支付的地方很多，比如传统的柜台、店家销售、电子商务和远程商务、账单支付、个人对个人（P2P）、公司对公司（B2B）、薪资发放等，这些都需要使用不同的支付方式。</p>
<h2 id="3支付的发起方式">3.支付的发起方式</h2>
<p>支付可以由收款方发起，这时候我们需要知道付款方的账号信息，比如在商店里刷信用卡；<br>
也可以是由付款方发起，这时候我们需要知道收款方的账号信息，比如公司直接往员工银行账户转账。</p>
<h2 id="4支付系统除了完成交易外还包含什么">4.支付系统除了完成交易外，还包含什么</h2>
<p>支付系统在处理各种交易中，不仅仅是处理交易，完成钱或者价值的转移；更多时候，它也需要其它功能的支持，这包括了：制定法律法规、确定规范和程序、处理异常，还有收费的标准、一笔交易应该能多久保证能完成等。</p>
<p>支付方式不同，这些标准也会有所不同。比如银行卡的交易手续费通常比较高，自动交换中心（Automated Clearing House-ACH）交易完成的时间比较长等等。</p>
<hr>
<h1 id="二-市场占有">二、市场占有</h1>
<p>在美国，传统的支付方式会包含：</p>
<ul>
<li>各种卡：如借记卡、信用卡、预付（Prepaid）卡；</li>
<li>自动交换中心ACH：这是美国的一种转账系统，手续费远远低于各种卡交易；</li>
<li>支票；</li>
<li>现金；</li>
<li>电汇（Wire Transfer）；</li>
<li>Paypal等通过绑定银行卡的快捷支付或者手机支付。</li>
</ul>
<p>除了现金支付无法追踪，以上各种交易方式都可以进行数据追踪和分析。从近些年交易笔数来看，近一半是借记卡交易，约20%是信用卡交易，而余下的交易由ACH和支票平分秋色。从交易总额度来说，最多的为ACH，占60%以上，其次为支票，约占25%，而信用卡、借记卡因为手续费比较高，总交易额度只占3%。</p>
<p>这和中国的情况很不一样。早些年卡的交易笔数在中国要低得多。自从支付宝、微信支付成为主流支付方式后，绑卡的闭环系统交易量大大增加。</p>
<p>不论是银行系统，还是各种新型支付方式，都会希望尽可能地占领市场份额。这其中主要有三个原因：</p>
<ol>
<li>交易手续费会是一个很大的盈利方式；</li>
<li>资金流动会形成一个资金池，有用来投资的可能；</li>
<li>在支付生态系统中占有了很大的用户份额后，就有机会基于这个用户群体进行下一步的产品开发和推广，比如Square、亚马逊支付（Amazon Pay）就属于这一类。</li>
</ol>
<p>在市场分额的竞争中，支付技术带来的处理速度、安全性、使用的便捷性、国际化等因素，都是竞争力的主要体现。</p>
<hr>
<h1 id="三-钱包系统">三、钱包系统</h1>
<p>钱包系统是指用手机作为载体，通过一个App实现虚拟“钱包”。比如PayPal，支付宝，Square Cash，星巴克钱包，谷歌钱包、苹果支付（Apple Pay）等等。</p>
<p>钱包实现中常用的技术有：</p>
<ul>
<li>近场通讯（NFC）：一种手机芯片，可以和支持射频识别（RFID）的终端进行交互。苹果支付、安卓支付、三星智付（Apple Pay、Android Pay、Samsung Pay）都使用了NFC技术；</li>
<li>射频识别（RFID）：一种磁卡和终端交互的无线通信技术；</li>
<li>二维码（QR Code）：一种用于存储数据的机器可读的标识；</li>
<li>磁性感应（Magnetic Induction）：模拟读磁条时磁场的一种无线信号；</li>
<li>安全芯片（Secure Element）：手机中可安全存储数据的一种芯片；</li>
<li>主机卡模拟（HCE）：安卓手机中使用软件对智能卡进行虚拟而精确的呈现；</li>
<li>客户端验证数据（Customer Verification Numbers CVNs）：关联用户银行卡的一个由磁卡或芯片卡产生，能被银行系统识别的一个数字；</li>
<li>令牌化技术（Tokenization）：和卡号关联的一个标识，降低卡号公开的一个风险。</li>
</ul>
<p>除了这种和银行卡绑定的钱包，还有一种是App内预充值的钱包，比如星巴克的钱包（合肥生鲜传奇）。这种钱包只能应用于某个特定的场景，星巴克钱包就只能在星巴克连锁店用。星巴克这个移东应用实际上更像一个数字礼品卡，可以关联银行卡方便充值和支付，每次到柜台通过扫描二维码发起交易，星巴克的POS交易中，有约20%是通过这种手机钱包来支付的。</p>
<hr>
<h1 id="四-paypal-支付宝和微信支付">四、PayPal、支付宝和微信支付</h1>
<h2 id="1paypal">1.PayPal</h2>
<p>PayPal也叫贝宝，主要在美国使用。用户使用电子邮件来唯一标识自己的身份，通过关联信用卡或借记卡在用户之间进行资金转移，在各大电商网站使用广泛。手续费用较高，支持多个币种间的转换。总的来说对付款方保护的比较多，对收款方限制比较多。其主要产品和技术包括了PayPal Pro在内的十余种产品（PayPal Payments Standard / Advanced / Pro、Payflow Gateway、Express Checkout、Invoicing、Send Money、Mass Payments、X.Commerce Paltform等）。</p>
<p>此外，基于PayPal的Venmo，PayPal Here，PayPal Beacon，PayPal One Touch等产品也有不少用户。PayPal交易中，关联信用卡的交易约占60%，借记卡约占25%，使用钱包额度的约占15%。</p>
<p>PayPal使用灵活，有很好的风控系统，支付确认速度比较快，并且还支持多种币种和全球范围的大数据等，这些优点让它在美国支付领域逐渐积累了很大的用户群，用户的数目超过两亿。它最早主要在易贝（eBay）上使用，现在商家已达百万级，支付交易数上亿级，支付总额度达千亿级，虽然PayPal主要应用在电商，但也发展了很多新型市场。</p>
<p>专家预计，在未来至少十年内，PayPal仍然可以保持15%以上的增长率。</p>
<h2 id="2支付宝">2.支付宝</h2>
<p>支付宝是对应于PayPal在中国使用很广泛的支付方式。</p>
<p>支付宝的创立最初是为了解决阿里巴巴淘宝网内的交易安全问题，并首先使用了“第三方担保交易模式”，让买卖双方的资金和商品都能获得系统性的保护。2004年，支付宝独立成为公司，逐渐向更多的合作方提供支付服务，并发展成为中国最大的第三方支付平台，目前隶属于蚂蚁金服。</p>
<p>以2016年为例，在2016年，支付宝有了4.5亿实名认证用户，71%的支付笔数发生在移动端。2016天猫双十一全球狂欢节总交易额超过1207亿，其移动端占比82%，支付宝的支付峰值达到了12万笔/秒。这些都是极其庞大的支付数据。</p>
<p>到了今天，支付宝已经发展成为以支付业务为核心的生态环境，形成了一个提供生活服务的平台，这也是其核心竞争力的提现。另外，支付宝在理财方面也火力全开，余额宝、蚂蚁财富、花呗、借呗等功能的出现，大大加固了其在支付领域的护城河。</p>
<h2 id="3微信支付">3.微信支付</h2>
<p>微信最初是个即时通讯工具，后来发展成为一个庞大的社交平台，有了几亿的用户基数之后，做支付就变得势在必行。2014年，微信几乎是以必须进入的态势推出了微信支付功能。2015年春节，微信支付联合商家以“摇红包”的形式送出了5亿现金红包，一举奠定了微信支付在支付领域的地位。</p>
<p>微信支付依靠安全简洁的支付方式，庞大的日活用户，节制的商业态度，很快成为支付宝最大的竞争对手。2016年支付宝和微信的支付总额达3万亿美元，微信的支付总额达到了1.2万亿美元，基本上形成了两家独大的垄断地位。</p>
<hr>
<h1 id="五-square的产品与技术">五、Square的产品与技术</h1>
<p>Square 是杰克·多尔西（ Jack Dorsey ）和他的朋友在 2009 年共同创办的。</p>
<p>Square 系列包括 Square Cash 在内的多项产品（ Square Register、Square Stand、Square Capital、Square Wallet（已停止）、Square Order（已停止）、Square Store、Square Capital、Caviar（订餐服务）等）。我在 2013-2015 年间作为软件工程师曾就职 Square，参与了包括 Square Wallet、Square Market、Square Store 等多个项目的工作。</p>
<p>Square在技术上有自己的风格，这包括了使用音频输出口接入磁卡和芯片的读卡器，生成方便快捷的电子账单，指纹签名等多种创新。</p>
<p>Square凭借扎实的支付技术和各种对中小商家交易费用的优化，非常受欢迎。EMV卡新技术出来的时候，Square也在第一时间研究了读卡器并对其加以支持，因此在移动读卡器领域一直处于领先地位。</p>
<p>Square读卡器是一种新型的移动端POS系统。用一个小小的硬件即插即用到手机或者平板电脑的音频输出口上，可以像传统收银台一样支持银行卡交易。这种模式在美国中小商家风行一时，但是在中国市场反馈并不好，比如类似产品拉卡拉。我想这其中的原因，大概是国内直接携带并使用信用卡的人群并不是主流。</p>
<p>Square Cash是一款个人对个人（P2P）或者个人对公司（P2B）的产品，通过每个用户或者商家定义自己的“$Cashtags” 就可以轻松转账。因为在其技术实现中使用了一些技巧，所以它的手续费远远低于类似产品。</p>
<p>Square Stand 是一个可以和 iPad 集成的读卡器，并有相关的配件如 Cash Drawer，Printer 等。Square 所有交易中，iPad 上占约 60%，因此 Square Stand 一直是其主流产品。它的设计特别精美，和苹果的风格很像，也很搭配，但是制作成本很高。Squre 为了推广这一款明星产品，长期以低于成本价的价格销售。不过只要后期交易手续费足够高，这个本钱还是可以赚回来的。</p>
<p>虽然很多人认为 Square 是一家支付公司，但是其实杰克·多尔西一直把自己定位为一家贸易（Commerce）公司。Square 很注重数据和数据分析，风控系统也做得很好。</p>
<hr>
<h1 id="六-支付技术的发展趋势">六、支付技术的发展趋势</h1>
<h2 id="1可穿戴设备的支付">1.可穿戴设备的支付</h2>
<p>随着硬件技术的发展，可穿戴设备的支付逐渐开始占据一定的市场份额。可穿戴设备支付使用的技术包括无线BLE及智能手机和Beacons。比如微软智能手环 （Microsoft Band）、PayPal Pebble、苹果智能手表 （ Apple Watch）、谷歌眼镜 （Google Glass） 等，都可以一定程度上绑定手机完成支付。</p>
<h2 id="2让支付变得越来越快">2.让支付变得越来越快</h2>
<p>所有的支付方式不论是在验证，交易处理，还是记账、收据等环节都在让交易更省时更方便。最明显的就是ACH速度更迭越来越快。</p>
<h2 id="3虚拟货币的兴起">3.虚拟货币的兴起</h2>
<p>如比特币、数据区块链（Block Chain）记账法等。这些新型货币更多的用于一些货币不稳定的国家、跨国贸易和非法交易等。用于日常生活还会有很多挑战，也会有很长的路要走。</p>
<hr>
<blockquote>
<p>线上支付系统是一门巨大的生意，支付领域的战争正在全球如火如荼地展开，这个领域内的方面绝不是一篇文章能够写完的。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】20-项目管理中的三个技巧]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-20-xiang-mu-guan-li-zhong-de-san-ge-ji-qiao</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-20-xiang-mu-guan-li-zhong-de-san-ge-ji-qiao">
        </link>
        <updated>2019-11-21T02:21:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<blockquote>
<p>作为管理者，我们平时在项目管理的过程中，更侧重的是要保证团队成员能够按照你的期望值去完成任务。今天的这篇文章里，主要会进一步展开讲一些项目管理的技巧。</p>
</blockquote>
<hr>
<h1 id="一-我们在做项目计划的时候要对多个项目进行细分重组">一、我们在做项目计划的时候，要对多个项目进行细分重组</h1>
<h2 id="需要考虑的因素">需要考虑的因素</h2>
<p>怎么理解呢？我们从做这件事的目的说起。在给组里多个人分配任务的时候，我们往往需要考虑的因素包含以下的内容：</p>
<ul>
<li>先评估能力，再分配任务，每个人的能力要和任务的难度匹配；</li>
<li>每个人任务完成所需时间要尽量相等，也就是要达到一种负载平衡；</li>
<li>每个人得到的任务里，挑战有意思的工作和脏活累活的比例大致相等；</li>
<li>每个人任务里有足够的挑战，能够帮助其成长，又不至于太难而让其望而生畏并产生挫败感；</li>
<li>不同人的任务之间如果有依赖性，在分配任务的时候要安排合理的顺序，确保不会有人被别的人或事阻塞（Block）；</li>
<li>每个人的任务里都应该有一个主题，就好像故事有一条主线。这样，成员会觉得自己参与了一个比较完整的任务，进而产生成就感，而不是做了一堆杂活。</li>
</ul>
<p><strong>达到这个目的的手段，我们就姑且称之为“细分重组”。这个过程又包含了以下两个阶段:</strong><br>
<em><strong>第一个阶段：</strong></em><br>
你需要把所有要做的事情，细分成一个个的小任务，每个任务的大小、完成所需要的时间都大致差不多。如果有比较大的任务块，就尽可能地切分成几个小块。这需要管理者对项目本身的重点和任务细节有很好的把握。</p>
<p><em><strong>第二个阶段：</strong></em><br>
把这些大小均匀的任务块，按照上面提到的因素，分装到几个虚构的“箱子”里，然后分配给团队成员。这个就像打包装箱的过程，尤其需要注意的是，每个箱子一定都有一个主题，也就是说，如果你想给这个箱子起个名字，你一定能找到那个名字，并很好的概括其中的内容。最后，保证每个箱子在内容、重量等各方面都比较均衡。</p>
<p>完成了这个工作之后，后续项目的每一步，作为管理者的你都能心中有数。同时还能避免在后期执行过程中一些可能的弊端，例如，有的人工作繁重疲惫不堪，有的人则早早完成了自己的任务，缺乏挑战。这种任务划分的方式会让每个人更有成就感和责任感，因为他们完成的是一整个故事。</p>
<hr>
<h1 id="二-工期预算">二、工期预算</h1>
<p>一般情况下，项目管理者都会对每个任务的完成时间有自己的判断，但最终还要和接受任务的员工沟通清楚，并尊重对方的意见，确保双方能就任务完成时间达成一致。有了承诺，工作的目标性也会更强一些，毕竟，截止日期才是最好的效率工具。</p>
<p>这一点非常重要。如果不是双方达成一致的协议，或者不是双方都认可的合理的时间估算，一旦后期出现不能按期完成任务的时刻，就很容易出现一些令人不愉快的交流。</p>
<p>同时需要注意的是，很多工程师工程师在做时间预算的时候，会过于乐观。大部分工程师都比较乐观、积极、自信，他们沉浸在代码的世界里，试图把软件做的更好，却往往会忽略时间因素。当核对工期的时候，他们会根据自己的经验给出一个非常乐观的期限。</p>
<p>和普通人一样，工程师们会高估自己的编程能力和对复杂逻辑的处理能力。甚至，有时候工程师给出的工期是自己负责那部分程序编写完成的时间；然而，一个功能的完成，包含编译、单元测试、提交代码、集成测试、功能测试、性能测试和上线。如果不是特别留意，这些细节往往会泯灭在项目进度的时间表里，无法体现出来。</p>
<p>即使是一个很有估算经验得工程师，在新的项目中也有可能遇到各种各样的新问题，你会惊奇的发现，上一个项目中的方法在新的产品中失灵了。另外，开发中遇到的技术瓶颈或难以解决的Bug，也会耗费程序员大量的时间和精力，这时候我们能做的事情只有耐心等待，给他们时间去披荆斩棘，直到问题得以解决。</p>
<p>所以，在这个阶段，往往需要技术领导给出参考性的意见或建议；除此之外，你最好留一些缓冲时间，因为实际工作中总会有一些不可预见的情况发生。</p>
<hr>
<h1 id="三-实时跟踪并做好b计划备用计划">三、实时跟踪，并做好B计划（备用计划）</h1>
<p>技术领导要做好两手准备，比如，团队中有一部分人突然表现失常了怎么办？项目由于其他原因被阻塞了怎么办？</p>
<p>这时候我们需要最好以下两点：<br>
1.我们在“细分重组”中把工作分成了小块，在完成过程中，我们还需要设立各种里程碑。其中，有一些长期的大里程碑，也有一些为其一周到两周的小里程碑。这些里程碑就像你上高速行驶之前给自己订的目标：几点前要到某个服务区，几点前要到某个城市等等。有了这些里程碑，管理者就可以通过它们进行实时跟踪，了解项目进度，看看项目在开发过程中是不是按照正常节点进行，是不是出现问题了等等。</p>
<p>2.一旦出现延迟，管理者要和任务的负责人一起分析原因，询问对方能否追上进度，会不会对整个项目的进程有重大影响。如果问题不严重，可以不做调整，继续跟进。如果影响比较大，就要启动B计划了，比如调整执行的人员、提供额外的资源、分析执行的方法、调动其它组支援，甚至你需要重新考虑项目进度。</p>
<hr>
<h1 id="总结">总结</h1>
<p>其实说了那么多，总结起来就是：管理者首先要对大的项目进行细分重组，“打包装箱”之后再分配下去；其次，在工期估算方面，管理者要和任务负责人达成一致，并且要注意到，工程师们在进行时间估算的时候都比较乐观，最好为项目预留缓冲的时间；最后，要为项目设置大大小小的里程碑，并实时跟进，一旦项目出现问题，就要启动B计划。</p>
]]></content>
    </entry>
</feed>