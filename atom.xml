<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://iflytek-duan.github.io/</id>
    <title>iflytek-duan的Blog</title>
    <updated>2019-11-18T07:13:29.990Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://iflytek-duan.github.io/"/>
    <link rel="self" href="https://iflytek-duan.github.io//atom.xml"/>
    <subtitle>You cannot improve your past, but you can improve your future. Once time is wasted, life is wasted.</subtitle>
    <logo>https://iflytek-duan.github.io//images/avatar.png</logo>
    <icon>https://iflytek-duan.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, iflytek-duan的Blog</rights>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】13-管理者在进行工作分配时，会考虑哪些问题？]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-13-guan-li-zhe-zai-jin-xing-gong-zuo-fen-pei-shi-hui-kao-lu-na-xie-wen-ti</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-13-guan-li-zhe-zai-jin-xing-gong-zuo-fen-pei-shi-hui-kao-lu-na-xie-wen-ti">
        </link>
        <updated>2019-11-18T03:09:51.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>作为技术管理者，我们主要工作之一就是将工作进行分解和授权。那么，在这个过程当中，是否有一些需要值得注意的事项呢？<br>
对于不同的工作类型和工作场景而言，这个问题的答案自然也不尽相同，但总有一些共性的东西可以抽象出来，供大家参考。<br>
一般情况下，管理者更倾向于把重要、困难的工作交给自己信任的人。这种信任，包含了对他的了解程度，对其工作态度和能力水平的了解和肯定，也就是说，你需要做出判断：接到任务的人，到底能不能全力以赴的把事情做好。<br>
然而，“冰冻三尺非一日之寒”，信任并不是短期内能够建立起来的。<strong>那么，在没有建立起充分信任的情况下，我们该如何分配工作呢？</strong></p>
</blockquote>
<h1 id="一-建立参考基线">一、建立参考基线</h1>
<p>当和一个人没有任何直接接触的时候，我们可以通过第三方评价、个人履历以及该员工做过的项目和产品来衡量他的能力。</p>
<p>如果我们对该员工做过的项目有所了解，或者他得到了曾经与之共事过人的大力推荐，那么我们就可以建立起一个初步的参考基线，用来评估他是否是完成当前任务的最佳人选。</p>
<hr>
<h1 id="二-问对问题比正确答案更重要">二、问对问题比正确答案更重要</h1>
<p>把任务交到员工手里之前，要和他进行充分的沟通。告诉他任务的详细情形，看他会问出什么样的问题，提出哪些想法。</p>
<p>这也是评估一个人是否能胜任工作的重要标准，问对问题，有时候比给出正确答案更重要。</p>
<p>沟通的时候，要看他的问题和想法是否会尽可能的考虑所有情况，问问题和提想法之前是会去调研，还是直接去做一些想当然的假定。在你给出反馈意见或指导性建议之后，他的反馈是什么，又会问出什么样的问题，提出什么想法......这些都能够帮助我们进一步评估他是不是真正了解任务的情况，有没有综合区考虑任务中的问题。</p>
<hr>
<h1 id="三-工期估算">三、工期估算</h1>
<p>估算完成任务的工期是分配任务种必不可少的环节。你可以让接受任务的员工试者去估算：需要多久完成，大概什么时候完成，需要什么样的资源等。</p>
<p>如果他是个思维缜密的人，就回去考虑完成这个任务的所有相关问题。开发工作量会多大，会不会依赖其他人的工作，有多少沟通成本，技术难点是什么，有没有现成的方案，技术框架是什么，后期集成和测试的时间成本是多少，综合考虑后，再给出一个相对全面的时间估算。</p>
<p>很多时候，我们希望任务能够更快完成，所以员工给出一个短平快的工期是符合我们的预期，但如果他很多关键的因素没有考虑到，那就是一个过于乐观和不切实际的估算。</p>
<p>即使他给出了承诺，也不可能按期完成，因为对方并没有真正理解问题的复杂度。</p>
<p><strong>如果一个人不能够花费足够的时间去了解自己未知的部分，我们很难放心的把任务交给他独立完成。</strong></p>
<hr>
<h1 id="四-执行力">四、执行力</h1>
<p>执行力也是在我们分配任务的时候需要考虑的一个因素。</p>
<p>工作中有一些人，他们的沟通能力、计划能力都很强，但是执行力却比较差，或者没有粘滞力，在执行过程中容易遇难就退、虎头蛇尾。</p>
<p>这样的人，不论项目初期多么细致、周到、井井有条，最后总不能按期完成任务，或者工作成果与自己初期的规划有很大出入，甚至代码里有很多Bug。这些人属于能说但不能把事情做好的人，难以托付大事。如果你的项目种有重要的任务，切记不要交给这样的人去做。</p>
<hr>
<h1 id="五-后期维护">五、后期维护</h1>
<p>完成一个项目并不意味着项目结束，很多时候，项目上线了还需要一段时间的维护工作。这包括Bug修复，排查用户反馈的问题，完成后续的迭代开发等等。于是，你需要去观察：一个人是不是可以自觉地维护产品，有没有责任感，会不会推卸责任，出了问题，能不能第一时间冲到一线解决。这些都是很重要的品质，也是你能判断他是否能承担更重要工作的参考。</p>
<p>当一个员工项目越做越好时，我们也会很愿意将任务交给他，并提供支持和帮助。反之，如果员工反复犯同样的错误，这样就算扶上马也会一程都送不出去的人，带起来就会非常费劲，也很难承担重要的任务。</p>
<hr>
<h1 id="六-其它需要注意的细节">六、其它需要注意的细节</h1>
<p>另外，在工作分配过程中，我们还需要注意一些细节问题。</p>
<ul>
<li>
<p>如何对待新人<br>
一些职场新人很有潜力，但经验不足，也许他们在项目周期有很多地方考虑不完善。这个时候，不要轻易的否定他们的工作。如果你可以耐心的花些时间悉心指导，他们可以快速的学习或进步。</p>
</li>
<li>
<p>如何针对不同类型的员工分配任务<br>
管理者还会遇到不同类型的人才，有的技术强一点，有的协作好一点，有的慢性子，有的做事比较急躁。在分配任务的时候，你需要根据每个人的特点安排不同类型的任务，并提供相应的支持和帮助，扬长避短，才能发挥人员的最大效力。</p>
<p>比如，有的人干活比较慢，但慢活出细工，做出来的东西出错少，即使有错也能快速定位问题，搞清楚原因。而有的人干活快，可能早期代码问题多一点，但能够快速迭代，不断改进，最终也能做出稳定的线上产品。</p>
<p>针对这种情况，我们可以把线上产品的改动交给干活慢而稳的那个人来做，把需要快速迭代开发的产品交给能快速出结果的人来做。最终，这两个人都可以变成项目的核心人员。</p>
</li>
<li>
<p>大项目的工作分配<br>
大项目的分配，需要指定一个团队负责人，这个人也同样要具有分配任务的能力，很多事他不再是亲力亲为，而是采用这里提到的方法，把需要完成的工作，分配给合适的人，团队成员通力合作，才能够把项目做好。</p>
</li>
</ul>
<hr>
<h1 id="七-为什么会谈论这个问题">七、为什么会谈论这个问题</h1>
<p>我们在分配任务给别人的时候，别人也在分配任务给我们。我们在别人身上寻找某种品质，别人也在我们身上找寻类似的东西。</p>
<p>如果你希望承担更重要的任务，成为有担当的人，一方面需要提高自身的能力，发挥自己的特长，另一方面就是成为一个有态度的人。拿到一个任务，能不能全力以赴把事情做到最好。这些东西不仅仅会决定一个项目的成败，更重要的是打磨我们自己的心性，让我们在别人眼中，成为一个可以托付重任的人。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】12-数据库知识]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-12-shu-ju-ku-zhi-shi</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-12-shu-ju-ku-zhi-shi">
        </link>
        <updated>2019-11-14T08:38:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-关于数据库最常见的问题有哪些">一、关于数据库，最常见的问题有哪些？</h1>
<h2 id="1-数据库的选型">1. 数据库的选型</h2>
<p>因为每个公司的业务不同，数据库系统的应用场景也不一样，选型也会不尽相同，但可以肯定的是，<strong>没有哪个系统一定是最好的，只有相对公司业务场景更适用的</strong>。</p>
<p>比如：</p>
<ul>
<li>做支付业务一定要强调事务性、一致性的支持，许多社交平台平时需要的是高可用；</li>
<li>有的业务写操作特别重，有的业务更重要的是读操作；</li>
<li>有的业务可能只关心最近几天的数据，于是可以容忍老数据读写的低效，有的却要频频访问老数据，需要读写的高效；</li>
<li>有的业务可以通过加索引解决查询效率，有的却只能通过加缓存等等。</li>
</ul>
<p>这就是为什么很多公司会选择多个数据库系统并存，通过不同的技术和架构给予相关业务场景最优支持。如果一旦选型失误，便不会有频频踩坑一说，因为这基本就算直接掉进了坑里。</p>
<hr>
<h2 id="2-数据库相关的架构">2. 数据库相关的架构</h2>
<p>这里的数据库架构包括数据库上层的缓存系统设计，程序语言对数据库连接的处理，代理层（Proxy Layer）的功能，以及和二进制日志（Binlog）等相关数据管道（Data Pipeline）的搭建。当然，其中也包括了数据库系统的分区、备份等具体设计。</p>
<p>很多公司早期所有的表都在一个数据库里，因为各种连接池（Connection Pool）和吞吐量（Throughput）的限制，基本没法做扩展。能够合理的设计数据库表的分离，把数据相关的放在一起，不那么相关甚至不相关的放在另一个数据库里。这些看起来很简单的做法，很大程度上可以缓解可扩展的问题。</p>
<hr>
<h2 id="3-数据库平时遇到最多的错误人为错误">3. 数据库平时遇到最多的错误：人为错误</h2>
<p>再好的系统，使用姿势不对也是枉然，更何况并不是所有的工程师都是数据库专家，所以人为的错误是最常出现的问题。</p>
<p>人为错误分为两种：</p>
<ol>
<li>
<p>数据库操作时犯下的错误；<br>
<strong>操作数据库时犯错的概率比较低，但危害最大。</strong></p>
<p>常见的数据库操作时犯错的方式有：</p>
<ul>
<li>工程师无意或者有意，“不小心”删掉了数据库核心表中的所有数据；</li>
<li>工程师在线修改表结构（online schema change）的时候，不小心一步误操作，结果导致数据库被锁长达几个小时，导致相关业务挂掉几个小时；</li>
<li>两台服务器做主从切换时，拔错一个电源插头导致失败。</li>
</ul>
</li>
<li>
<p>开发工程师在程序里或脚本里犯下的错误。<br>
如果一个程序或者脚本查询没有索引的数据，导致全表扫描，再加上一些网页服务器（Web Server）的并行访问，经常会有整个数据库所有连接被占用的情况，连接终止查询（Kill Query）都没法执行，只能人肉的去做一些物理重启的操作。面对这类问题，可以使用数据库连接查询功能，比如<code>left outer join</code>来避免N + 1的问题。</p>
</li>
</ol>
<hr>
<h2 id="4-数据库访问瓶颈">4. 数据库访问瓶颈</h2>
<p>只要是数据库，就会有吞吐量的限制，而数据库访问瓶颈便是自然流量增长或者流量突增造成的。只要你的业务在增长，总有一天数据库访问就会达到一个上限。在这个预警到来前，你需要做各种垂直或水平扩展来提升这个上限，或者，你可以通过缓存和其它机制来对访问量进行分流，这里面可以做的工作就很多了。</p>
<p>流量的突增一般是类似分布式拒接服务（DDoS）或市场活动带来的，也可能是因为某个黑天鹅事件造成的，这些原因都很难预料。</p>
<p>如果是有计划的市场活动，就需要提前做好各种战斗准备。如果是恶意攻击，也就只能依靠各种防御工程，如IP阻塞（IP Blocking）或者第三方高防系统挡掉这些流量来保证数据库的正常工作。</p>
<hr>
<h1 id="二-研发过程中与数据库相关的问题">二、研发过程中与数据库相关的问题</h1>
<blockquote>
<p>在这里我们以<strong>MySQL</strong>为例。</p>
</blockquote>
<h2 id="1-索引">1. 索引</h2>
<p>创建索引通常是为了<strong>提高查询语句的性能</strong>，将某些列以特定的数据结构（常见的如B-Tree）有序存储起来。维持这样的一个数据结构在写数据时会有一些性能开销（Overhead）。但如果查询语句确实是高频的，那么这样的系统开销就很划算。在建表时需要考虑所有可能的高频查询，另一方面，要忌讳过度的“为未来设计”（Desgin for the future），也就是加一堆根本不常用的索引，反而增加了写数据时的成本和负担。</p>
<p>索引另一个常见的用途就是保证某一列或者某几列的组合是唯一的（Unique），这也称为唯一性索引（Unique Indexing），在写业务逻辑代码时会常常用到。</p>
<p>比如你有一个用户表（User Table），你想让所有用户（User）的电子邮件都是唯一的，这个时候用唯一索引（Unique Indexing）就很方便。不过唯一索引（Unique Indexing）和可选列（Optional Column）组合在一起的时候，也有很多需要注意的地方。</p>
<p>比如：你想对X做唯一索引（Unique Indexing），过了一段时间，也有有些情况下X（Column X）并不唯一，我们便把索引改成了对列X和列Y做唯一索引（Unique Index Column X + Column Y），但是列Y（Column Y）时Nullable的，那么这个时候会出现什么情况呢————你会有很多记录，有着一样的X值，以及Null的Y值（因为Null在数据库里常常解释为“不确定”而不是空）。</p>
<hr>
<h2 id="2-事务支持">2. 事务支持</h2>
<p>数据库的事务支持（Transactional Support），简单来说，就是利用数据库本身的事务性，来封装一系列需要同时完成的动作。</p>
<p>比如：在一段事务里面，先执行X，再执行Y（Transaction do X；Y；end），如果X和Y都是数据库写操作，那么两个写操作要么都成功，要么都失败。也就是说，对数据库的改动会统一把事务所做的修改提交（Commit）到数据库，而提交（Commit）前的任何错误都会触发所有更新回滚到开始的状态（Rollback）或引发不正常的进程终止（Abort）。</p>
<p>虽然正确的使用事务支持（Transactional Support）会很方便，但是也常常见到过度使用让代码变得很脆弱甚至出现BUG的情况。</p>
<p>常见的情况如下：</p>
<ul>
<li>
<p>事务（Transaction）中封装的代码逻辑太长太复杂，甚至调用了别的函数。很多时候，很难去推理当执行中抛出异常的话，到底哪些会回滚，哪些会产生遗留影响。</p>
</li>
<li>
<p>事务中封装了与数据库改动无关的逻辑。</p>
</li>
<li>
<p>事务中存在不可逆的操作，如发送电子邮件给用户，发布（Publish）到一个Job队列（Queue）等。这种情况会导致系统的不一致。比如：一个写操作被回滚了，但这条数据相关的Job还是被加入到队列了，就会引发错误。</p>
</li>
<li>
<p>事务中包含了在不同数据库里的事务，也就是分布式事务，这需要单独处理。</p>
</li>
<li>
<p>事务中嵌套了事务，不同情况可能会有不同结果，如果没搞清楚，就可能会出现意外的行为。</p>
<p><em><strong>过过度使用事务支持往往会让逻辑变得不必要的复杂。</strong></em></p>
</li>
</ul>
<hr>
<h2 id="3-数据库锁">3. 数据库锁</h2>
<p>数据库会出现Race Condition，我们常常把Race Condition叫做竞争条件，是指多个进程或者线程并发访问和操作同一数据，且执行结果与访问发生的特定顺序有关的现象。</p>
<p>如何解决竞争条件（Race Condtion）呢？常见的方法是使用各种锁机制来确保行为的可预测性和正确性。根据实际情况的不同，加锁的方式会不一样。</p>
<p>常见的有乐观锁（Optimistic Locking）和悲观锁（Pessimistic Locking）。总的来说，前者在对性能要求比较高的系统里比较常见。在实际应用中，很多系统会自己实现锁定（Locking）机制。</p>
<hr>
<h2 id="4-缓存和主从机制">4. 缓存和主从机制</h2>
<p>为了提高性能，我们会为数据库增加缓存（Cache）和主从（Master-Slave）等机制，这时候会引起数据的不一致性。常见的情况是，如果系统默认实在从（Slave）节点读取数据，那么一些刚刚更新到主节（Master）的数据在读的时候就有可能读不到。这个情况在使用一些数据关联（Association）的时候更容易读不到。Rails的Active Record数据关联（Association），就容易出现这一类问题。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://iflytek-duan.github.io//post/hello-gridea</id>
        <link href="https://iflytek-duan.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>