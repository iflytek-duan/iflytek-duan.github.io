<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://iflytek-duan.github.io/</id>
    <title>紫豪的Blog</title>
    <updated>2019-12-02T02:44:10.909Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://iflytek-duan.github.io/"/>
    <link rel="self" href="https://iflytek-duan.github.io//atom.xml"/>
    <subtitle>You cannot improve your past, but you can improve your future. Once time is wasted, life is wasted.</subtitle>
    <logo>https://iflytek-duan.github.io//images/avatar.png</logo>
    <icon>https://iflytek-duan.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 紫豪的Blog</rights>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】24-编程语言漫谈]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-24-bian-cheng-yu-yan-man-tan</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-24-bian-cheng-yu-yan-man-tan">
        </link>
        <updated>2019-12-02T02:23:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1初学者不要纠结先学哪种语言">1.初学者不要纠结“先学哪种语言”</h2>
<p>初学者在先学哪种语言上花费时间纠结很不值得，还不如随便挑选一个语言，跳进去游几圈试试。对于工程师来说，学会第一种编程语言只是万里长征的第一步，只要你还在这个领域，就不可能只学习一种语言，只会一种语言的工程师根本不能称之为工程师。</p>
<hr>
<h2 id="2只有先掌握好一种语言才能快速学好其它语言">2.只有先掌握好一种语言，才能快速学好其它语言</h2>
<p>如果你不能用一种编程语言的基本特性写好代码，那换成另外一种语言也无济于事，你会写出同样差的代码。比如，你的Java很糟糕，那么换成Go、Ruby，你的代码也会同样糟糕、甚至更差。</p>
<hr>
<h2 id="3脚本语言也可以作为入门语言">3.脚本语言也可以作为入门语言</h2>
<p>很多人觉得不要用脚本语言入门，我觉得不一定，尤其是现在就着人工智能的浪潮搞机器学习的人，用Python入门就挺好。另外，脚本语言在面试中占优势。平时找工作Ruby、Python、C++和Java熟练度差不多，但面试中使用Ruby或者Python答题，写代码的时间估计是两者的一半。</p>
<hr>
<h2 id="4不要有明确的前后端分隔">4.不要有明确的前后端分隔</h2>
<p>后端工程师要熟练掌握一门前端语言，前端工程师也要熟练掌握一门后端语言。倒不是为了提倡全栈或多能力储备，而是两者的编程思维模式很不一样。知己知彼，在架构设计和解决具体问题时，才会更精确的判断。</p>
<p>另外，现在大前端的概念也比较流行，也就是大前端工程师能同时掌握Web编程语言、iOS和Android编程语言，原生技术（iOS和Android）和Web的配合越来越紧密。</p>
<hr>
<h2 id="5sql是一门非常重要并且应该熟练掌握的语言虽然它不能被称为编程语言">5.SQL是一门非常重要并且应该熟练掌握的语言（虽然它不能被称为编程语言）</h2>
<p>如果你平时的编程工作中涉及到业务功能，而不是纯粹的技术架构，一定会使用到数据库。SQL就是数据的语言，通过它，你可以和数据建立连接和沟通。</p>
<p>如果你数据访问模式写的很差，轻则代码性能一塌糊涂，重则引发Bug，而涉及数据的问题，Bug等级都比较高，后果可能很严重。</p>
<hr>
<h2 id="6工程师要具备搭建测试框架的能力">6.工程师要具备搭建测试框架的能力</h2>
<p>无论什么语言，工程师都应该能够基于这种语言搭建测试框架，写好测试代码和写业务代码一样重要，甚至更重要。工作后你会发现，可能有时候我们只花五分钟写了一个程序，而为其写一个能差不多覆盖所有功能路径的测试用例集却花了一个小时。</p>
<hr>
<h2 id="7在任何时候都要用并发的-分布式的思维去看待你的程序">7.在任何时候都要用并发的、分布式的思维去看待你的程序</h2>
<p>因为竞争条件或者并发中的不确定因素（比如调用顺序）导致的Bug，仅仅理解语言的基本特性，根本不能解释。</p>
<p>每种语言都有自己的并发编程模式（比如Go的Goroutine，Java的ForkJoinPool，Swift的Swift Grand Central Dispatch等）。学习每一种语言，都应该深入了解它的并发模型，在这个多核的时代，不懂并发的程序员不可能是个好工程师。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】23-如何处理工作中的人际关系？]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-23-ru-he-chu-li-gong-zuo-zhong-de-ren-ji-guan-xi</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-23-ru-he-chu-li-gong-zuo-zhong-de-ren-ji-guan-xi">
        </link>
        <updated>2019-11-27T08:18:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<blockquote>
<p>当我们初入职场时，职能级别可能比较低，大部分工作会比较独立，即使不是特别善于处理各种人际关系，问题也不算大，一来你不用协调资源，独立工作会占主要部分，很多时候都是处于闷头做事的状态中；二来，组里会有一些老员工，可以帮助你做各种沟通工作。<br>
但是，若想职场进阶，一直往前走，到了某个阶段，比如需要你去做更多的协调和沟通工作而不仅仅是写代码的时候，如何处理人际关系就成了一项必不可少的软技能，重要性不比技术上的硬计能低。</p>
</blockquote>
<hr>
<h1 id="如何更好的处理工作中的人际关系">如何更好的处理工作中的人际关系</h1>
<ul>
<li>
<p><strong>首先，对于自己的上下级，保持开放的心态和愿意沟通的态度十分重要</strong><br>
上下级是在职场中最无法避免的人际关系，因为各人性格不同，可能你和有些人更容易在看法和决策上达成一致，而有些人则经常不能很好的理解别人的意图，需要多次沟通，采用对应的沟通方式。上下级之间的利益关系大多时候是绑在一起的，如果处理不好，对彼此的工作有很大的影响不说，很多时候还会发生不愉快的事情。</p>
</li>
<li>
<p><strong>其次，在交往过程中，尽可能地对别人分享、工作、交流持一种积极、友善和鼓励的态度</strong><br>
我们常常把处理人际关系的态度分为三类。第一类是给予者，这类人，不怎么计较得失，总是尽最大可能的去帮助和支持别人。第二类人秉承对等关系，谁对他好，他就对谁好，自己帮了别人一次，或者别人帮了自己，都是一个人情，都会记在内心的小本本上，那是一个无形的账本。第三类人是索取者，这种人只会跟对自己有帮助的人接触，做的事也是从自身的利益出发。</p>
<p>当提到这三种人时，我们脑海里可能会浮现出一些人物形象并对号入座，甚至还会想到现实中这样的例子。对于自身来说，大部分时候我们会认为自己是第一类人，也可能是第二类人，或者是介于第一跟第二类人之间，总之，绝对不会认为自己是第三类人。</p>
<p>这其实说明了人们的潜意识里都认可第一类是最积极向上的处世之道，然而在现实中，因为能力、对方态度、利益关系等各种因素，我们能表现出来的“不计较得失”就可能有很大的局限性。</p>
<p>如果我们每个人都向“给予者”的方向努力，那么便容易建立一个正能量满满的工作环境，与别人的交流也会更加顺畅。</p>
</li>
<li>
<p><strong>第三，加入一些有利于自己成长的社交圈子</strong><br>
比如特定技术有共同的兴趣社区，对摄影、读书有共同爱好的小组等。这些圈子可能很大很正式，比如一些商业组织，也可以是几个有共同困难或者目标的同事组成的微信群，平时进行一些非常随意的常规讨论。</p>
</li>
<li>
<p><strong>第四，是当地寻求帮助</strong><br>
很多时候主动向另一个人表示你需要他的帮助，其实会很巧妙的增加两个人的亲密度。当然，不要问不值得问的问题，注意是不是会耽误对方太多的时间，自己的态度也尽可能的开放、谦逊。</p>
<p>反之，如果别人向你寻求帮助，尽可能耐心地协助对方解决问题，如果很忙或者时机不对，就告诉对方，并问是不是可以换个时间。如果对方比你资历浅，或者问的问题太简单，也不要摆架子或者显得很不耐烦。</p>
</li>
<li>
<p><strong>第五，对于别人的意见要尽可能的认真对待</strong><br>
即使没有任何实际行动，也让对方明白你的想法，为什么你没有采纳他的意见。自己给别人的意见也要诚恳，如果是个人看法，不要强迫于人，尤其不要拿一些理论上有争议的看法强迫别人接受，比如哪个设计模式更好。如果是真实案例里并且会影响到项目进展的对错，尽可能地摆事实举例子让对方明白你的想法和出发点，本着把事情做好的原则去沟通。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】22-不要做微观的管理者]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-22-bu-yao-zuo-wei-guan-de-guan-li-zhe</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-22-bu-yao-zuo-wei-guan-de-guan-li-zhe">
        </link>
        <updated>2019-11-26T02:14:40.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<blockquote>
<p>每个管理者都有其独特的管理风格，有的管理者在做项目时喜欢频繁的跟进和指导，很多并不重要的技术决定也会给出自己的想法，而不是让组员做决定；有的管理者更倾向于给组员一定的自由度，在项目实施过程种，有一定的计划和安排，只需要了解组员在作什么、为什么这么做、什么时候完成。千人千面的管理风格，不论是通过什么手段、方式，最终的目的还是为了项目更好的完成。</p>
</blockquote>
<hr>
<h1 id="一-因人而异">一、因人而异</h1>
<p>我们共同的同事，大部分都是很优秀的人。他们和你一样进入这个公司，每个人都经历了差不多的考察和审核，每个人的能力都是毋庸置疑的，但每个人的优点和缺点，擅长的领域，往往各不相同。</p>
<p>有些人在全局规划、协调资源方面有更强的能力，有的人则注重细节，可以把定义好的任务完美完成。有的人善于思考，有的人擅长交流，有的人专注执行......我们要做的，是最大程度的调动并发挥其长处，并帮助他在短板方面获得更快地成长。所谓用人用其长，就是这个道理，说起来容易，要真正做到，还要不断调整和练习。</p>
<p>另外，每个人都不是一成不变的。再有能力的一个人，刚进到一个公司，一个小组，接手一个项目，都需要时间和资源去学习相关的背景知识。如何给他们充分的资源、信息和指导，又同时给他们足够的空间，往往不能一概而论。</p>
<p>如果是工作多年的职业工程师，尽管各个公司的一些流程和工作方式不太一样，你只要给出指导性的建议和准则，他们就能很快时应调整。如果是刚从学校毕业的新人，那么从各种工具的使用、开发流程的熟悉、代码的规范化，都需要更多的指导。这样的人往往需要安排一个有经验的工程师去带，才能获得最快的成长速度。</p>
<hr>
<h1 id="二-因事而异">二、因事而异</h1>
<p>先问问自己，这个任务在项目中是不是很重要，是不是很紧急。如果是，并且每一步的完成都有很强的时间限制，在“怎么做”的方面会因为各种要求或者限制并没有太多的发挥余地，那么，这时候，更多的介入是你最好的选择，不过在介入之前，你需要让对方理解为什么需要频繁沟通。</p>
<p>如果单个任务在整个项目中有一定的试错空间，或者不在时间线的关键路径上，这时，你不妨试着放手让组员尝试独立完成。管理者这样才能够鼓励创新，并可以增强组员的工作积极性。因为组员全权负责任务，即使出了错，他也会更有责任感和经验去改进。</p>
<p>也许有人觉得，我的整个项目时间都非常紧，任何一个点都不容易出错，那么你就应该去思考，如何规划整个项目时间和人员的安排，尽可能去创造一个可以让员工发挥的空间。如果什么也不能放手，除了对员工的积极性有负面的影响，你的时间和精力，也将进入一个无法扩展的工作轨道。</p>
<hr>
<h1 id="三-跟进的粒度">三、跟进的粒度</h1>
<p>关于跟进粒度，最极端的两种方法就是：只设立目标，然后完全放手，这样的做法是等你意识到事情已经脱离轨道的时候，往往很难拉回正轨或者补救；另一种是每个细节都按照你的想法去推进，这就无法让员工发挥自己的能力。作为管理者，我们需要在两种极端中找一个平衡。</p>
<p>根据前面提到的两个原则，根据不同的人和事，我们应该做到以下几点：</p>
<h2 id="1制定目标确保传达">1.制定目标，确保传达</h2>
<p>管理者应当非常清楚的说明你想要的结果是什么样子，并明确地告诉员工：他的责任是达成什么目标，你会通过结果来衡量他们。</p>
<h2 id="2多给指导少亲手做">2.多给指导，少亲手做</h2>
<p>管理者无须事必躬亲，也不要监视每一个细节。你只需要花一些精力确保你的意图已经被明确传递了，管理者的存在不是分担实际工作，而是一种资源，更是背后支持力量。</p>
<h2 id="3设定频率保持跟进">3.设定频率，保持跟进</h2>
<p>根据对方的经验和任务的紧急度，设定一个常规的跟进频率。每次跟进了解工作进展，是否有拦路石需要帮忙清除。除此之外，给对方足够的决定权。</p>
<h2 id="4交流难点给出建议">4.交流难点，给出建议</h2>
<p>当进度受阻时，你需要与员工交流，搞清楚问题所在，是能力问题、资源不够、还是时间紧张。根据交流成果，你可以给出一些建设性的建议和意见，帮助其提高能力，但不要直接上手帮忙完成任务。</p>
<hr>
<h1 id="四-交流的重要性">四、交流的重要性</h1>
<p>在日常项目开发中，交流是非常重要的。人与人之间交流太容易产生信息丢失，很多时候我们都以为双方交流的信息达成了一致，结果确认的时候发现完全不是一回事。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】21-中美在支付技术和大环境下的差异]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-21-zhong-mei-zai-zhi-fu-ji-zhu-he-da-huan-jing-xia-de-chai-yi</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-21-zhong-mei-zai-zhi-fu-ji-zhu-he-da-huan-jing-xia-de-chai-yi">
        </link>
        <updated>2019-11-21T07:12:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-概况">一、概况</h1>
<h2 id="1支付系统的定义">1.支付系统的定义</h2>
<p>当我们谈支付系统的时候，一般会这样定义：一笔钱从甲方转到乙方。这笔转移可能是商家和顾客之间的货款交易，也可能是个人对个人的转账，支付系统就是让这笔转账或交易发生的系统。这中间可能是银行间的转账，也可能是一个虚拟的闭环系统，比如在支付宝、PayPal、甚至比特币系统中的价值转移。</p>
<h2 id="2支付的发生场景">2.支付的发生场景</h2>
<p>用到支付的地方很多，比如传统的柜台、店家销售、电子商务和远程商务、账单支付、个人对个人（P2P）、公司对公司（B2B）、薪资发放等，这些都需要使用不同的支付方式。</p>
<h2 id="3支付的发起方式">3.支付的发起方式</h2>
<p>支付可以由收款方发起，这时候我们需要知道付款方的账号信息，比如在商店里刷信用卡；<br>
也可以是由付款方发起，这时候我们需要知道收款方的账号信息，比如公司直接往员工银行账户转账。</p>
<h2 id="4支付系统除了完成交易外还包含什么">4.支付系统除了完成交易外，还包含什么</h2>
<p>支付系统在处理各种交易中，不仅仅是处理交易，完成钱或者价值的转移；更多时候，它也需要其它功能的支持，这包括了：制定法律法规、确定规范和程序、处理异常，还有收费的标准、一笔交易应该能多久保证能完成等。</p>
<p>支付方式不同，这些标准也会有所不同。比如银行卡的交易手续费通常比较高，自动交换中心（Automated Clearing House-ACH）交易完成的时间比较长等等。</p>
<hr>
<h1 id="二-市场占有">二、市场占有</h1>
<p>在美国，传统的支付方式会包含：</p>
<ul>
<li>各种卡：如借记卡、信用卡、预付（Prepaid）卡；</li>
<li>自动交换中心ACH：这是美国的一种转账系统，手续费远远低于各种卡交易；</li>
<li>支票；</li>
<li>现金；</li>
<li>电汇（Wire Transfer）；</li>
<li>Paypal等通过绑定银行卡的快捷支付或者手机支付。</li>
</ul>
<p>除了现金支付无法追踪，以上各种交易方式都可以进行数据追踪和分析。从近些年交易笔数来看，近一半是借记卡交易，约20%是信用卡交易，而余下的交易由ACH和支票平分秋色。从交易总额度来说，最多的为ACH，占60%以上，其次为支票，约占25%，而信用卡、借记卡因为手续费比较高，总交易额度只占3%。</p>
<p>这和中国的情况很不一样。早些年卡的交易笔数在中国要低得多。自从支付宝、微信支付成为主流支付方式后，绑卡的闭环系统交易量大大增加。</p>
<p>不论是银行系统，还是各种新型支付方式，都会希望尽可能地占领市场份额。这其中主要有三个原因：</p>
<ol>
<li>交易手续费会是一个很大的盈利方式；</li>
<li>资金流动会形成一个资金池，有用来投资的可能；</li>
<li>在支付生态系统中占有了很大的用户份额后，就有机会基于这个用户群体进行下一步的产品开发和推广，比如Square、亚马逊支付（Amazon Pay）就属于这一类。</li>
</ol>
<p>在市场分额的竞争中，支付技术带来的处理速度、安全性、使用的便捷性、国际化等因素，都是竞争力的主要体现。</p>
<hr>
<h1 id="三-钱包系统">三、钱包系统</h1>
<p>钱包系统是指用手机作为载体，通过一个App实现虚拟“钱包”。比如PayPal，支付宝，Square Cash，星巴克钱包，谷歌钱包、苹果支付（Apple Pay）等等。</p>
<p>钱包实现中常用的技术有：</p>
<ul>
<li>近场通讯（NFC）：一种手机芯片，可以和支持射频识别（RFID）的终端进行交互。苹果支付、安卓支付、三星智付（Apple Pay、Android Pay、Samsung Pay）都使用了NFC技术；</li>
<li>射频识别（RFID）：一种磁卡和终端交互的无线通信技术；</li>
<li>二维码（QR Code）：一种用于存储数据的机器可读的标识；</li>
<li>磁性感应（Magnetic Induction）：模拟读磁条时磁场的一种无线信号；</li>
<li>安全芯片（Secure Element）：手机中可安全存储数据的一种芯片；</li>
<li>主机卡模拟（HCE）：安卓手机中使用软件对智能卡进行虚拟而精确的呈现；</li>
<li>客户端验证数据（Customer Verification Numbers CVNs）：关联用户银行卡的一个由磁卡或芯片卡产生，能被银行系统识别的一个数字；</li>
<li>令牌化技术（Tokenization）：和卡号关联的一个标识，降低卡号公开的一个风险。</li>
</ul>
<p>除了这种和银行卡绑定的钱包，还有一种是App内预充值的钱包，比如星巴克的钱包（合肥生鲜传奇）。这种钱包只能应用于某个特定的场景，星巴克钱包就只能在星巴克连锁店用。星巴克这个移东应用实际上更像一个数字礼品卡，可以关联银行卡方便充值和支付，每次到柜台通过扫描二维码发起交易，星巴克的POS交易中，有约20%是通过这种手机钱包来支付的。</p>
<hr>
<h1 id="四-paypal-支付宝和微信支付">四、PayPal、支付宝和微信支付</h1>
<h2 id="1paypal">1.PayPal</h2>
<p>PayPal也叫贝宝，主要在美国使用。用户使用电子邮件来唯一标识自己的身份，通过关联信用卡或借记卡在用户之间进行资金转移，在各大电商网站使用广泛。手续费用较高，支持多个币种间的转换。总的来说对付款方保护的比较多，对收款方限制比较多。其主要产品和技术包括了PayPal Pro在内的十余种产品（PayPal Payments Standard / Advanced / Pro、Payflow Gateway、Express Checkout、Invoicing、Send Money、Mass Payments、X.Commerce Paltform等）。</p>
<p>此外，基于PayPal的Venmo，PayPal Here，PayPal Beacon，PayPal One Touch等产品也有不少用户。PayPal交易中，关联信用卡的交易约占60%，借记卡约占25%，使用钱包额度的约占15%。</p>
<p>PayPal使用灵活，有很好的风控系统，支付确认速度比较快，并且还支持多种币种和全球范围的大数据等，这些优点让它在美国支付领域逐渐积累了很大的用户群，用户的数目超过两亿。它最早主要在易贝（eBay）上使用，现在商家已达百万级，支付交易数上亿级，支付总额度达千亿级，虽然PayPal主要应用在电商，但也发展了很多新型市场。</p>
<p>专家预计，在未来至少十年内，PayPal仍然可以保持15%以上的增长率。</p>
<h2 id="2支付宝">2.支付宝</h2>
<p>支付宝是对应于PayPal在中国使用很广泛的支付方式。</p>
<p>支付宝的创立最初是为了解决阿里巴巴淘宝网内的交易安全问题，并首先使用了“第三方担保交易模式”，让买卖双方的资金和商品都能获得系统性的保护。2004年，支付宝独立成为公司，逐渐向更多的合作方提供支付服务，并发展成为中国最大的第三方支付平台，目前隶属于蚂蚁金服。</p>
<p>以2016年为例，在2016年，支付宝有了4.5亿实名认证用户，71%的支付笔数发生在移动端。2016天猫双十一全球狂欢节总交易额超过1207亿，其移动端占比82%，支付宝的支付峰值达到了12万笔/秒。这些都是极其庞大的支付数据。</p>
<p>到了今天，支付宝已经发展成为以支付业务为核心的生态环境，形成了一个提供生活服务的平台，这也是其核心竞争力的提现。另外，支付宝在理财方面也火力全开，余额宝、蚂蚁财富、花呗、借呗等功能的出现，大大加固了其在支付领域的护城河。</p>
<h2 id="3微信支付">3.微信支付</h2>
<p>微信最初是个即时通讯工具，后来发展成为一个庞大的社交平台，有了几亿的用户基数之后，做支付就变得势在必行。2014年，微信几乎是以必须进入的态势推出了微信支付功能。2015年春节，微信支付联合商家以“摇红包”的形式送出了5亿现金红包，一举奠定了微信支付在支付领域的地位。</p>
<p>微信支付依靠安全简洁的支付方式，庞大的日活用户，节制的商业态度，很快成为支付宝最大的竞争对手。2016年支付宝和微信的支付总额达3万亿美元，微信的支付总额达到了1.2万亿美元，基本上形成了两家独大的垄断地位。</p>
<hr>
<h1 id="五-square的产品与技术">五、Square的产品与技术</h1>
<p>Square 是杰克·多尔西（ Jack Dorsey ）和他的朋友在 2009 年共同创办的。</p>
<p>Square 系列包括 Square Cash 在内的多项产品（ Square Register、Square Stand、Square Capital、Square Wallet（已停止）、Square Order（已停止）、Square Store、Square Capital、Caviar（订餐服务）等）。我在 2013-2015 年间作为软件工程师曾就职 Square，参与了包括 Square Wallet、Square Market、Square Store 等多个项目的工作。</p>
<p>Square在技术上有自己的风格，这包括了使用音频输出口接入磁卡和芯片的读卡器，生成方便快捷的电子账单，指纹签名等多种创新。</p>
<p>Square凭借扎实的支付技术和各种对中小商家交易费用的优化，非常受欢迎。EMV卡新技术出来的时候，Square也在第一时间研究了读卡器并对其加以支持，因此在移动读卡器领域一直处于领先地位。</p>
<p>Square读卡器是一种新型的移动端POS系统。用一个小小的硬件即插即用到手机或者平板电脑的音频输出口上，可以像传统收银台一样支持银行卡交易。这种模式在美国中小商家风行一时，但是在中国市场反馈并不好，比如类似产品拉卡拉。我想这其中的原因，大概是国内直接携带并使用信用卡的人群并不是主流。</p>
<p>Square Cash是一款个人对个人（P2P）或者个人对公司（P2B）的产品，通过每个用户或者商家定义自己的“$Cashtags” 就可以轻松转账。因为在其技术实现中使用了一些技巧，所以它的手续费远远低于类似产品。</p>
<p>Square Stand 是一个可以和 iPad 集成的读卡器，并有相关的配件如 Cash Drawer，Printer 等。Square 所有交易中，iPad 上占约 60%，因此 Square Stand 一直是其主流产品。它的设计特别精美，和苹果的风格很像，也很搭配，但是制作成本很高。Squre 为了推广这一款明星产品，长期以低于成本价的价格销售。不过只要后期交易手续费足够高，这个本钱还是可以赚回来的。</p>
<p>虽然很多人认为 Square 是一家支付公司，但是其实杰克·多尔西一直把自己定位为一家贸易（Commerce）公司。Square 很注重数据和数据分析，风控系统也做得很好。</p>
<hr>
<h1 id="六-支付技术的发展趋势">六、支付技术的发展趋势</h1>
<h2 id="1可穿戴设备的支付">1.可穿戴设备的支付</h2>
<p>随着硬件技术的发展，可穿戴设备的支付逐渐开始占据一定的市场份额。可穿戴设备支付使用的技术包括无线BLE及智能手机和Beacons。比如微软智能手环 （Microsoft Band）、PayPal Pebble、苹果智能手表 （ Apple Watch）、谷歌眼镜 （Google Glass） 等，都可以一定程度上绑定手机完成支付。</p>
<h2 id="2让支付变得越来越快">2.让支付变得越来越快</h2>
<p>所有的支付方式不论是在验证，交易处理，还是记账、收据等环节都在让交易更省时更方便。最明显的就是ACH速度更迭越来越快。</p>
<h2 id="3虚拟货币的兴起">3.虚拟货币的兴起</h2>
<p>如比特币、数据区块链（Block Chain）记账法等。这些新型货币更多的用于一些货币不稳定的国家、跨国贸易和非法交易等。用于日常生活还会有很多挑战，也会有很长的路要走。</p>
<hr>
<blockquote>
<p>线上支付系统是一门巨大的生意，支付领域的战争正在全球如火如荼地展开，这个领域内的方面绝不是一篇文章能够写完的。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】20-项目管理中的三个技巧]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-20-xiang-mu-guan-li-zhong-de-san-ge-ji-qiao</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-20-xiang-mu-guan-li-zhong-de-san-ge-ji-qiao">
        </link>
        <updated>2019-11-21T02:21:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<blockquote>
<p>作为管理者，我们平时在项目管理的过程中，更侧重的是要保证团队成员能够按照你的期望值去完成任务。今天的这篇文章里，主要会进一步展开讲一些项目管理的技巧。</p>
</blockquote>
<hr>
<h1 id="一-我们在做项目计划的时候要对多个项目进行细分重组">一、我们在做项目计划的时候，要对多个项目进行细分重组</h1>
<h2 id="需要考虑的因素">需要考虑的因素</h2>
<p>怎么理解呢？我们从做这件事的目的说起。在给组里多个人分配任务的时候，我们往往需要考虑的因素包含以下的内容：</p>
<ul>
<li>先评估能力，再分配任务，每个人的能力要和任务的难度匹配；</li>
<li>每个人任务完成所需时间要尽量相等，也就是要达到一种负载平衡；</li>
<li>每个人得到的任务里，挑战有意思的工作和脏活累活的比例大致相等；</li>
<li>每个人任务里有足够的挑战，能够帮助其成长，又不至于太难而让其望而生畏并产生挫败感；</li>
<li>不同人的任务之间如果有依赖性，在分配任务的时候要安排合理的顺序，确保不会有人被别的人或事阻塞（Block）；</li>
<li>每个人的任务里都应该有一个主题，就好像故事有一条主线。这样，成员会觉得自己参与了一个比较完整的任务，进而产生成就感，而不是做了一堆杂活。</li>
</ul>
<p><strong>达到这个目的的手段，我们就姑且称之为“细分重组”。这个过程又包含了以下两个阶段:</strong><br>
<em><strong>第一个阶段：</strong></em><br>
你需要把所有要做的事情，细分成一个个的小任务，每个任务的大小、完成所需要的时间都大致差不多。如果有比较大的任务块，就尽可能地切分成几个小块。这需要管理者对项目本身的重点和任务细节有很好的把握。</p>
<p><em><strong>第二个阶段：</strong></em><br>
把这些大小均匀的任务块，按照上面提到的因素，分装到几个虚构的“箱子”里，然后分配给团队成员。这个就像打包装箱的过程，尤其需要注意的是，每个箱子一定都有一个主题，也就是说，如果你想给这个箱子起个名字，你一定能找到那个名字，并很好的概括其中的内容。最后，保证每个箱子在内容、重量等各方面都比较均衡。</p>
<p>完成了这个工作之后，后续项目的每一步，作为管理者的你都能心中有数。同时还能避免在后期执行过程中一些可能的弊端，例如，有的人工作繁重疲惫不堪，有的人则早早完成了自己的任务，缺乏挑战。这种任务划分的方式会让每个人更有成就感和责任感，因为他们完成的是一整个故事。</p>
<hr>
<h1 id="二-工期预算">二、工期预算</h1>
<p>一般情况下，项目管理者都会对每个任务的完成时间有自己的判断，但最终还要和接受任务的员工沟通清楚，并尊重对方的意见，确保双方能就任务完成时间达成一致。有了承诺，工作的目标性也会更强一些，毕竟，截止日期才是最好的效率工具。</p>
<p>这一点非常重要。如果不是双方达成一致的协议，或者不是双方都认可的合理的时间估算，一旦后期出现不能按期完成任务的时刻，就很容易出现一些令人不愉快的交流。</p>
<p>同时需要注意的是，很多工程师工程师在做时间预算的时候，会过于乐观。大部分工程师都比较乐观、积极、自信，他们沉浸在代码的世界里，试图把软件做的更好，却往往会忽略时间因素。当核对工期的时候，他们会根据自己的经验给出一个非常乐观的期限。</p>
<p>和普通人一样，工程师们会高估自己的编程能力和对复杂逻辑的处理能力。甚至，有时候工程师给出的工期是自己负责那部分程序编写完成的时间；然而，一个功能的完成，包含编译、单元测试、提交代码、集成测试、功能测试、性能测试和上线。如果不是特别留意，这些细节往往会泯灭在项目进度的时间表里，无法体现出来。</p>
<p>即使是一个很有估算经验得工程师，在新的项目中也有可能遇到各种各样的新问题，你会惊奇的发现，上一个项目中的方法在新的产品中失灵了。另外，开发中遇到的技术瓶颈或难以解决的Bug，也会耗费程序员大量的时间和精力，这时候我们能做的事情只有耐心等待，给他们时间去披荆斩棘，直到问题得以解决。</p>
<p>所以，在这个阶段，往往需要技术领导给出参考性的意见或建议；除此之外，你最好留一些缓冲时间，因为实际工作中总会有一些不可预见的情况发生。</p>
<hr>
<h1 id="三-实时跟踪并做好b计划备用计划">三、实时跟踪，并做好B计划（备用计划）</h1>
<p>技术领导要做好两手准备，比如，团队中有一部分人突然表现失常了怎么办？项目由于其他原因被阻塞了怎么办？</p>
<p>这时候我们需要最好以下两点：<br>
1.我们在“细分重组”中把工作分成了小块，在完成过程中，我们还需要设立各种里程碑。其中，有一些长期的大里程碑，也有一些为其一周到两周的小里程碑。这些里程碑就像你上高速行驶之前给自己订的目标：几点前要到某个服务区，几点前要到某个城市等等。有了这些里程碑，管理者就可以通过它们进行实时跟踪，了解项目进度，看看项目在开发过程中是不是按照正常节点进行，是不是出现问题了等等。</p>
<p>2.一旦出现延迟，管理者要和任务的负责人一起分析原因，询问对方能否追上进度，会不会对整个项目的进程有重大影响。如果问题不严重，可以不做调整，继续跟进。如果影响比较大，就要启动B计划了，比如调整执行的人员、提供额外的资源、分析执行的方法、调动其它组支援，甚至你需要重新考虑项目进度。</p>
<hr>
<h1 id="总结">总结</h1>
<p>其实说了那么多，总结起来就是：管理者首先要对大的项目进行细分重组，“打包装箱”之后再分配下去；其次，在工期估算方面，管理者要和任务负责人达成一致，并且要注意到，工程师们在进行时间估算的时候都比较乐观，最好为项目预留缓冲的时间；最后，要为项目设置大大小小的里程碑，并实时跟进，一旦项目出现问题，就要启动B计划。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】17-管理者不用亲力亲为：关键是什么？]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-17-guan-li-zhe-bu-yong-qin-li-qin-wei-guan-jian-shi-shi-me</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-17-guan-li-zhe-bu-yong-qin-li-qin-wei-guan-jian-shi-shi-me">
        </link>
        <updated>2019-11-20T01:55:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<blockquote>
<p>大部分被提拔为技术领导的工程师都有一定的领导力，最重要的是，他们都具备出色的业务能力；这些技术能力强悍的工程师在刚刚走上管理岗位时，往往喜欢亲力亲为，他们对别人干活并不是很放心，恨不得自己把所有的重要工作都给做了。然而这样只会让自己变得越来越累，工作越来越吃力，作为一个技术管理者，应该适度授权给别人，在过程中学会掌握任务分配技巧，只有这样，才能快速胜任管理岗位，带领团队越做越好。</p>
</blockquote>
<hr>
<h1 id="作为一个技术管理者在授权和任务分配时我们应该注意哪些方面">作为一个技术管理者，在授权和任务分配时我们应该注意哪些方面？</h1>
<h2 id="1明确任务目标">1.明确任务目标</h2>
<pre><code>要让接受任务的人明确目标，知道最终要达成什么样的预期效果。
</code></pre>
<p>比如：在什么时间内完成什么样的任务，你对这个任务成功的定义是什么，如果有取舍的话，哪些最重要，哪些是次要的，哪些是可以妥协的。如果这些标准没有说清楚，很可能会出现认知的偏差，比如对方觉得做的很好，但是你认为有些很重要的东西并没有照顾到。</p>
<h2 id="2严谨的计划制定">2.严谨的计划制定</h2>
<pre><code>制定一个计划，并保持跟进。
</code></pre>
<p>跟进不是指导，不是让自己频繁的去介入别人的工作任务，告诉对方下面该做什么了；而是需要你在对方在某个环节出现问题得时候，能够提供帮助。这种帮助可能是解决方案，也可能是技术方向。当对方在下一步该怎么做没有头绪的时候，你可以与其讨论，给出建议或者线索，确保没有大的阻碍阻止他取得关键性的进展。</p>
<h2 id="3适时给出反馈">3.适时给出反馈</h2>
<pre><code>在任务执行过程中，要适时地给出反馈，尤其是正面的反馈。
</code></pre>
<p>当对方做的很好的时候，你要及时的给予肯定。对方处于平台期没有突破的时候，只要他还在努力，就应当给予适当的鼓励。反馈要尽可能的客观，不要在小细节上有太多的意见。如果在方向或者优先级上偏离了你的预期，要及时交流纠正，了解对方的想法，找到问题的原因，让项目走上正轨。</p>
<hr>
<h1 id="管理者不用亲力亲为的关键是什么">管理者不用亲力亲为的关键是什么？</h1>
<p>关键就在于要<strong>学会授权和任务分配</strong>。在这个过程中，我们要注意以下两点：</p>
<ul>
<li>要有效地把任务分配出去；</li>
<li>要保证被分配出去的任务能够圆满完成。</li>
</ul>
<p>事情无论是自己做还是交给别人做，让事情更快更好的完成永远是第一位的。很多优秀的工程师最初都是独行侠，他们单枪匹马完成了很多丰功伟绩，也更习惯自己独立的去完成工作，但一旦他们发现团队协作可以获取更大的成就时，就会从亲力亲为转变为授权模式，帮助别人成功，团队才会获得更大的成功。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】16-技术人如何建立个人影响力]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-16-ji-zhu-ren-ru-he-jian-li-ge-ren-ying-xiang-li</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-16-ji-zhu-ren-ru-he-jian-li-ge-ren-ying-xiang-li">
        </link>
        <updated>2019-11-19T01:41:18.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>美国著名的心理学家和作家Robert Cialdini教授提出过 几条影响力的原则，这些原则也可以用在团队中：<br>
1.多帮助身边的同事，产生互惠关系；<br>
2.真诚对人认真做事；<br>
3.树立榜样效应；<br>
4.建立自己威信，从诚实可信做起；<br>
5.让同事对你产生好感，俗话说：得道者多助。</p>
</blockquote>
<h1 id="一-影响力具体是指什么">一、影响力具体是指什么？</h1>
<ol>
<li>
<p><strong>存在感</strong><br>
你的意见别人会认真听。</p>
</li>
<li>
<p><strong>说服力</strong><br>
当别人和你的意见不同的时候，能有效地让对方真的明白你的出发点，虽然不一定会百分之百地采纳，但会认可你的观点。</p>
</li>
<li>
<p><strong>谈判力</strong><br>
双方共同完成一个项目，让职责划分尽可能公平，对双方都有利。</p>
</li>
<li>
<p><strong>协调力</strong><br>
多方合作的时候，你能起到桥梁的作用，促进多方更好地沟通。</p>
</li>
<li>
<p><strong>鼓舞力</strong><br>
也就是我们平时说的灌鸡汤、打鸡血的能力。</p>
</li>
</ol>
<hr>
<h1 id="二-如何提升自己这些方面的能力从而建立个人影响力">二、如何提升自己这些方面的能力，从而建立个人影响力？</h1>
<ol>
<li>
<p><strong>存在感</strong><br>
不要在一些可有可无的事情上纠缠，不要非让别人尊重你的意见；<br>
对一件事情不确定的话，要说清楚哪些是自己有把握的，哪些是自己的推测；<br>
如果一个观点来自别人，点名这是谁说的，一是对别人的尊重，二是如果对方需要进一步了解，那么，他知道应该去找谁；<br>
总而言之，就是有三分话不要说五分，有七分话不要说十分，实事求是才能更有效地促进沟通。</p>
</li>
<li>
<p><strong>说服力</strong><br>
说服别人之前，要尽可能保证自己观点清晰，条理清楚。最重要的是，你需要站在对方的立场去了解，为什么他会不认同你的观点。</p>
<p>很多时候，我们只是没有完全理解对方的想法，结果造成了无谓的争论；所以，增加说服力的重点是找到对方不认可的那些地方，反复讨论，达成一致，而不是去争执自己正确的观点有多么“正确”。</p>
</li>
<li>
<p><strong>谈判力</strong><br>
谈判力取决于你的知识、智慧、经验和直觉。要对某一件事具备精确的判断力，你必须去搞清楚事情的来龙去脉，也就是事情的经过和背景。除此之外，你还需要知道，哪些是自己的底线，哪些是对方的利益，通过最大化双方利益建立合作，并尽可能最小化双方冲突的地方。</p>
<p>在谈判的过程中，你可以让步，但是要让对方明白，这是自己的一个让步，希望对方理解，并在自己无法让步的地方提供一些支持。当然，谈判力是一种不能速成的软技能，但是作为技术人，保持自己的逻辑清晰，懂得适度取舍，就是一个好的开始。</p>
<blockquote>
<p>即便在有些地方需要做出让步，也需要提出对应的条件，不能一味无条件的让步，否则只会助长对方，达不到谈判预期，有条件的让步才能够让谈判双方更理性的看待问题。如：在不能压缩开发周期的情况下要求加快速度，那么就要向对方说明会造成哪些影响（如稳定性、安全性、兼容性等不能得到保证）。</p>
</blockquote>
</li>
<li>
<p><strong>协调力</strong><br>
培养多方协调的能力，需要从平时做起。工作中你需要和经常一起合作的人保持良好的关系和顺畅沟通，学会成为团队里“让事情发生的人”，搞清楚各组员之间的相关性，项目进度之间的依赖性等。</p>
<p>对于资源的变更保持敏感，面对项目计划的变更、人员和岗位的调整，要能适时合理地传达，确保合作计划尽可能地随之变化，各方面都有相应的协同。不要在任何一方没有了解变化的情况下做出决定，如果必须做出决定，也要使用对方能接受的方式进行提前沟通。</p>
</li>
<li>
<p><strong>鼓舞力</strong><br>
如果你是一位技术领导者，就应该培养自己“振臂一呼，应者云集”的能力，这是技术领导力的体现之一。<br>
培养鼓舞力，你需要去了解对方担心的地方，并适时的加以帮助。预先获知对方的长处，在他取得阶段性胜利的时候，或者通过自己努力克服困难的时候，找机会明确地对他的长处予以肯定，并对他的付出表示认可、感谢或者赞赏。如果有意见，多提建设性的意见，让对方在相对愉悦的心境下做出改变。</p>
</li>
</ol>
<hr>
<h1 id="三-总结">三、总结</h1>
<p>建立个人影响力并不是为了凸显自己有多么重要，或者让别人更加认可你，而是通过影响力把事情做成、做好。</p>
<p>在一个技术团队里，影响力很多时候与你的个人贡献紧密相关。如果你的存在能够让别人的工作更好地推进，让别人更容易取得成就，久而久之，伙伴们就会很自然的认可你、信服你，有问题的时候，也会想到要咨询你的意见。帮助别人成功，帮助别人成就梦想，你就会具备积极正向的影响力。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】13-管理者在进行工作分配时，会考虑哪些问题？]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-13-guan-li-zhe-zai-jin-xing-gong-zuo-fen-pei-shi-hui-kao-lu-na-xie-wen-ti</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-13-guan-li-zhe-zai-jin-xing-gong-zuo-fen-pei-shi-hui-kao-lu-na-xie-wen-ti">
        </link>
        <updated>2019-11-18T03:09:51.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>作为技术管理者，我们主要工作之一就是将工作进行分解和授权。那么，在这个过程当中，是否有一些需要值得注意的事项呢？<br>
对于不同的工作类型和工作场景而言，这个问题的答案自然也不尽相同，但总有一些共性的东西可以抽象出来，供大家参考。<br>
一般情况下，管理者更倾向于把重要、困难的工作交给自己信任的人。这种信任，包含了对他的了解程度，对其工作态度和能力水平的了解和肯定，也就是说，你需要做出判断：接到任务的人，到底能不能全力以赴的把事情做好。<br>
然而，“冰冻三尺非一日之寒”，信任并不是短期内能够建立起来的。<strong>那么，在没有建立起充分信任的情况下，我们该如何分配工作呢？</strong></p>
</blockquote>
<h1 id="一-建立参考基线">一、建立参考基线</h1>
<p>当和一个人没有任何直接接触的时候，我们可以通过第三方评价、个人履历以及该员工做过的项目和产品来衡量他的能力。</p>
<p>如果我们对该员工做过的项目有所了解，或者他得到了曾经与之共事过人的大力推荐，那么我们就可以建立起一个初步的参考基线，用来评估他是否是完成当前任务的最佳人选。</p>
<hr>
<h1 id="二-问对问题比正确答案更重要">二、问对问题比正确答案更重要</h1>
<p>把任务交到员工手里之前，要和他进行充分的沟通。告诉他任务的详细情形，看他会问出什么样的问题，提出哪些想法。</p>
<p>这也是评估一个人是否能胜任工作的重要标准，问对问题，有时候比给出正确答案更重要。</p>
<p>沟通的时候，要看他的问题和想法是否会尽可能的考虑所有情况，问问题和提想法之前是会去调研，还是直接去做一些想当然的假定。在你给出反馈意见或指导性建议之后，他的反馈是什么，又会问出什么样的问题，提出什么想法......这些都能够帮助我们进一步评估他是不是真正了解任务的情况，有没有综合区考虑任务中的问题。</p>
<hr>
<h1 id="三-工期估算">三、工期估算</h1>
<p>估算完成任务的工期是分配任务种必不可少的环节。你可以让接受任务的员工试者去估算：需要多久完成，大概什么时候完成，需要什么样的资源等。</p>
<p>如果他是个思维缜密的人，就回去考虑完成这个任务的所有相关问题。开发工作量会多大，会不会依赖其他人的工作，有多少沟通成本，技术难点是什么，有没有现成的方案，技术框架是什么，后期集成和测试的时间成本是多少，综合考虑后，再给出一个相对全面的时间估算。</p>
<p>很多时候，我们希望任务能够更快完成，所以员工给出一个短平快的工期是符合我们的预期，但如果他很多关键的因素没有考虑到，那就是一个过于乐观和不切实际的估算。</p>
<p>即使他给出了承诺，也不可能按期完成，因为对方并没有真正理解问题的复杂度。</p>
<p><strong>如果一个人不能够花费足够的时间去了解自己未知的部分，我们很难放心的把任务交给他独立完成。</strong></p>
<hr>
<h1 id="四-执行力">四、执行力</h1>
<p>执行力也是在我们分配任务的时候需要考虑的一个因素。</p>
<p>工作中有一些人，他们的沟通能力、计划能力都很强，但是执行力却比较差，或者没有粘滞力，在执行过程中容易遇难就退、虎头蛇尾。</p>
<p>这样的人，不论项目初期多么细致、周到、井井有条，最后总不能按期完成任务，或者工作成果与自己初期的规划有很大出入，甚至代码里有很多Bug。这些人属于能说但不能把事情做好的人，难以托付大事。如果你的项目种有重要的任务，切记不要交给这样的人去做。</p>
<hr>
<h1 id="五-后期维护">五、后期维护</h1>
<p>完成一个项目并不意味着项目结束，很多时候，项目上线了还需要一段时间的维护工作。这包括Bug修复，排查用户反馈的问题，完成后续的迭代开发等等。于是，你需要去观察：一个人是不是可以自觉地维护产品，有没有责任感，会不会推卸责任，出了问题，能不能第一时间冲到一线解决。这些都是很重要的品质，也是你能判断他是否能承担更重要工作的参考。</p>
<p>当一个员工项目越做越好时，我们也会很愿意将任务交给他，并提供支持和帮助。反之，如果员工反复犯同样的错误，这样就算扶上马也会一程都送不出去的人，带起来就会非常费劲，也很难承担重要的任务。</p>
<hr>
<h1 id="六-其它需要注意的细节">六、其它需要注意的细节</h1>
<p>另外，在工作分配过程中，我们还需要注意一些细节问题。</p>
<ul>
<li>
<p>如何对待新人<br>
一些职场新人很有潜力，但经验不足，也许他们在项目周期有很多地方考虑不完善。这个时候，不要轻易的否定他们的工作。如果你可以耐心的花些时间悉心指导，他们可以快速的学习或进步。</p>
</li>
<li>
<p>如何针对不同类型的员工分配任务<br>
管理者还会遇到不同类型的人才，有的技术强一点，有的协作好一点，有的慢性子，有的做事比较急躁。在分配任务的时候，你需要根据每个人的特点安排不同类型的任务，并提供相应的支持和帮助，扬长避短，才能发挥人员的最大效力。</p>
<p>比如，有的人干活比较慢，但慢活出细工，做出来的东西出错少，即使有错也能快速定位问题，搞清楚原因。而有的人干活快，可能早期代码问题多一点，但能够快速迭代，不断改进，最终也能做出稳定的线上产品。</p>
<p>针对这种情况，我们可以把线上产品的改动交给干活慢而稳的那个人来做，把需要快速迭代开发的产品交给能快速出结果的人来做。最终，这两个人都可以变成项目的核心人员。</p>
</li>
<li>
<p>大项目的工作分配<br>
大项目的分配，需要指定一个团队负责人，这个人也同样要具有分配任务的能力，很多事他不再是亲力亲为，而是采用这里提到的方法，把需要完成的工作，分配给合适的人，团队成员通力合作，才能够把项目做好。</p>
</li>
</ul>
<hr>
<h1 id="七-为什么会谈论这个问题">七、为什么会谈论这个问题</h1>
<p>我们在分配任务给别人的时候，别人也在分配任务给我们。我们在别人身上寻找某种品质，别人也在我们身上找寻类似的东西。</p>
<p>如果你希望承担更重要的任务，成为有担当的人，一方面需要提高自身的能力，发挥自己的特长，另一方面就是成为一个有态度的人。拿到一个任务，能不能全力以赴把事情做到最好。这些东西不仅仅会决定一个项目的成败，更重要的是打磨我们自己的心性，让我们在别人眼中，成为一个可以托付重任的人。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【朱赟的技术管理】12-数据库知识]]></title>
        <id>https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-12-shu-ju-ku-zhi-shi</id>
        <link href="https://iflytek-duan.github.io//post/zhu-yun-de-ji-zhu-guan-li-12-shu-ju-ku-zhi-shi">
        </link>
        <updated>2019-11-14T08:38:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-关于数据库最常见的问题有哪些">一、关于数据库，最常见的问题有哪些？</h1>
<h2 id="1-数据库的选型">1. 数据库的选型</h2>
<p>因为每个公司的业务不同，数据库系统的应用场景也不一样，选型也会不尽相同，但可以肯定的是，<strong>没有哪个系统一定是最好的，只有相对公司业务场景更适用的</strong>。</p>
<p>比如：</p>
<ul>
<li>做支付业务一定要强调事务性、一致性的支持，许多社交平台平时需要的是高可用；</li>
<li>有的业务写操作特别重，有的业务更重要的是读操作；</li>
<li>有的业务可能只关心最近几天的数据，于是可以容忍老数据读写的低效，有的却要频频访问老数据，需要读写的高效；</li>
<li>有的业务可以通过加索引解决查询效率，有的却只能通过加缓存等等。</li>
</ul>
<p>这就是为什么很多公司会选择多个数据库系统并存，通过不同的技术和架构给予相关业务场景最优支持。如果一旦选型失误，便不会有频频踩坑一说，因为这基本就算直接掉进了坑里。</p>
<hr>
<h2 id="2-数据库相关的架构">2. 数据库相关的架构</h2>
<p>这里的数据库架构包括数据库上层的缓存系统设计，程序语言对数据库连接的处理，代理层（Proxy Layer）的功能，以及和二进制日志（Binlog）等相关数据管道（Data Pipeline）的搭建。当然，其中也包括了数据库系统的分区、备份等具体设计。</p>
<p>很多公司早期所有的表都在一个数据库里，因为各种连接池（Connection Pool）和吞吐量（Throughput）的限制，基本没法做扩展。能够合理的设计数据库表的分离，把数据相关的放在一起，不那么相关甚至不相关的放在另一个数据库里。这些看起来很简单的做法，很大程度上可以缓解可扩展的问题。</p>
<hr>
<h2 id="3-数据库平时遇到最多的错误人为错误">3. 数据库平时遇到最多的错误：人为错误</h2>
<p>再好的系统，使用姿势不对也是枉然，更何况并不是所有的工程师都是数据库专家，所以人为的错误是最常出现的问题。</p>
<p>人为错误分为两种：</p>
<ol>
<li>
<p>数据库操作时犯下的错误；<br>
<strong>操作数据库时犯错的概率比较低，但危害最大。</strong></p>
<p>常见的数据库操作时犯错的方式有：</p>
<ul>
<li>工程师无意或者有意，“不小心”删掉了数据库核心表中的所有数据；</li>
<li>工程师在线修改表结构（online schema change）的时候，不小心一步误操作，结果导致数据库被锁长达几个小时，导致相关业务挂掉几个小时；</li>
<li>两台服务器做主从切换时，拔错一个电源插头导致失败。</li>
</ul>
</li>
<li>
<p>开发工程师在程序里或脚本里犯下的错误。<br>
如果一个程序或者脚本查询没有索引的数据，导致全表扫描，再加上一些网页服务器（Web Server）的并行访问，经常会有整个数据库所有连接被占用的情况，连接终止查询（Kill Query）都没法执行，只能人肉的去做一些物理重启的操作。面对这类问题，可以使用数据库连接查询功能，比如<code>left outer join</code>来避免N + 1的问题。</p>
</li>
</ol>
<hr>
<h2 id="4-数据库访问瓶颈">4. 数据库访问瓶颈</h2>
<p>只要是数据库，就会有吞吐量的限制，而数据库访问瓶颈便是自然流量增长或者流量突增造成的。只要你的业务在增长，总有一天数据库访问就会达到一个上限。在这个预警到来前，你需要做各种垂直或水平扩展来提升这个上限，或者，你可以通过缓存和其它机制来对访问量进行分流，这里面可以做的工作就很多了。</p>
<p>流量的突增一般是类似分布式拒接服务（DDoS）或市场活动带来的，也可能是因为某个黑天鹅事件造成的，这些原因都很难预料。</p>
<p>如果是有计划的市场活动，就需要提前做好各种战斗准备。如果是恶意攻击，也就只能依靠各种防御工程，如IP阻塞（IP Blocking）或者第三方高防系统挡掉这些流量来保证数据库的正常工作。</p>
<hr>
<h1 id="二-研发过程中与数据库相关的问题">二、研发过程中与数据库相关的问题</h1>
<blockquote>
<p>在这里我们以<strong>MySQL</strong>为例。</p>
</blockquote>
<h2 id="1-索引">1. 索引</h2>
<p>创建索引通常是为了<strong>提高查询语句的性能</strong>，将某些列以特定的数据结构（常见的如B-Tree）有序存储起来。维持这样的一个数据结构在写数据时会有一些性能开销（Overhead）。但如果查询语句确实是高频的，那么这样的系统开销就很划算。在建表时需要考虑所有可能的高频查询，另一方面，要忌讳过度的“为未来设计”（Desgin for the future），也就是加一堆根本不常用的索引，反而增加了写数据时的成本和负担。</p>
<p>索引另一个常见的用途就是保证某一列或者某几列的组合是唯一的（Unique），这也称为唯一性索引（Unique Indexing），在写业务逻辑代码时会常常用到。</p>
<p>比如你有一个用户表（User Table），你想让所有用户（User）的电子邮件都是唯一的，这个时候用唯一索引（Unique Indexing）就很方便。不过唯一索引（Unique Indexing）和可选列（Optional Column）组合在一起的时候，也有很多需要注意的地方。</p>
<p>比如：你想对X做唯一索引（Unique Indexing），过了一段时间，也有有些情况下X（Column X）并不唯一，我们便把索引改成了对列X和列Y做唯一索引（Unique Index Column X + Column Y），但是列Y（Column Y）时Nullable的，那么这个时候会出现什么情况呢————你会有很多记录，有着一样的X值，以及Null的Y值（因为Null在数据库里常常解释为“不确定”而不是空）。</p>
<hr>
<h2 id="2-事务支持">2. 事务支持</h2>
<p>数据库的事务支持（Transactional Support），简单来说，就是利用数据库本身的事务性，来封装一系列需要同时完成的动作。</p>
<p>比如：在一段事务里面，先执行X，再执行Y（Transaction do X；Y；end），如果X和Y都是数据库写操作，那么两个写操作要么都成功，要么都失败。也就是说，对数据库的改动会统一把事务所做的修改提交（Commit）到数据库，而提交（Commit）前的任何错误都会触发所有更新回滚到开始的状态（Rollback）或引发不正常的进程终止（Abort）。</p>
<p>虽然正确的使用事务支持（Transactional Support）会很方便，但是也常常见到过度使用让代码变得很脆弱甚至出现BUG的情况。</p>
<p>常见的情况如下：</p>
<ul>
<li>
<p>事务（Transaction）中封装的代码逻辑太长太复杂，甚至调用了别的函数。很多时候，很难去推理当执行中抛出异常的话，到底哪些会回滚，哪些会产生遗留影响。</p>
</li>
<li>
<p>事务中封装了与数据库改动无关的逻辑。</p>
</li>
<li>
<p>事务中存在不可逆的操作，如发送电子邮件给用户，发布（Publish）到一个Job队列（Queue）等。这种情况会导致系统的不一致。比如：一个写操作被回滚了，但这条数据相关的Job还是被加入到队列了，就会引发错误。</p>
</li>
<li>
<p>事务中包含了在不同数据库里的事务，也就是分布式事务，这需要单独处理。</p>
</li>
<li>
<p>事务中嵌套了事务，不同情况可能会有不同结果，如果没搞清楚，就可能会出现意外的行为。</p>
<p><em><strong>过过度使用事务支持往往会让逻辑变得不必要的复杂。</strong></em></p>
</li>
</ul>
<hr>
<h2 id="3-数据库锁">3. 数据库锁</h2>
<p>数据库会出现Race Condition，我们常常把Race Condition叫做竞争条件，是指多个进程或者线程并发访问和操作同一数据，且执行结果与访问发生的特定顺序有关的现象。</p>
<p>如何解决竞争条件（Race Condtion）呢？常见的方法是使用各种锁机制来确保行为的可预测性和正确性。根据实际情况的不同，加锁的方式会不一样。</p>
<p>常见的有乐观锁（Optimistic Locking）和悲观锁（Pessimistic Locking）。总的来说，前者在对性能要求比较高的系统里比较常见。在实际应用中，很多系统会自己实现锁定（Locking）机制。</p>
<hr>
<h2 id="4-缓存和主从机制">4. 缓存和主从机制</h2>
<p>为了提高性能，我们会为数据库增加缓存（Cache）和主从（Master-Slave）等机制，这时候会引起数据的不一致性。常见的情况是，如果系统默认实在从（Slave）节点读取数据，那么一些刚刚更新到主节（Master）的数据在读的时候就有可能读不到。这个情况在使用一些数据关联（Association）的时候更容易读不到。Rails的Active Record数据关联（Association），就容易出现这一类问题。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://iflytek-duan.github.io//post/hello-gridea</id>
        <link href="https://iflytek-duan.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>